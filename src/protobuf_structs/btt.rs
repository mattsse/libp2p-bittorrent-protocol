// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct MetaInfo {
    // message fields
    pub annouce_url: ::std::string::String,
    pub name: ::std::string::String,
    pub piece_length: u32,
    pub pieces: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub length: u64,
    pub files: ::protobuf::RepeatedField<MetaInfo_FileInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetaInfo {
    fn default() -> &'a MetaInfo {
        <MetaInfo as ::protobuf::Message>::default_instance()
    }
}

impl MetaInfo {
    pub fn new() -> MetaInfo {
        ::std::default::Default::default()
    }

    // string annouce_url = 1;


    pub fn get_annouce_url(&self) -> &str {
        &self.annouce_url
    }
    pub fn clear_annouce_url(&mut self) {
        self.annouce_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_annouce_url(&mut self, v: ::std::string::String) {
        self.annouce_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_annouce_url(&mut self) -> &mut ::std::string::String {
        &mut self.annouce_url
    }

    // Take field
    pub fn take_annouce_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.annouce_url, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint32 piece_length = 3;


    pub fn get_piece_length(&self) -> u32 {
        self.piece_length
    }
    pub fn clear_piece_length(&mut self) {
        self.piece_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_piece_length(&mut self, v: u32) {
        self.piece_length = v;
    }

    // repeated bytes pieces = 4;


    pub fn get_pieces(&self) -> &[::std::vec::Vec<u8>] {
        &self.pieces
    }
    pub fn clear_pieces(&mut self) {
        self.pieces.clear();
    }

    // Param is passed by value, moved
    pub fn set_pieces(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.pieces = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pieces(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.pieces
    }

    // Take field
    pub fn take_pieces(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.pieces, ::protobuf::RepeatedField::new())
    }

    // uint64 length = 5;


    pub fn get_length(&self) -> u64 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u64) {
        self.length = v;
    }

    // repeated .structs.pb.MetaInfo.FileInfo files = 6;


    pub fn get_files(&self) -> &[MetaInfo_FileInfo] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<MetaInfo_FileInfo>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<MetaInfo_FileInfo> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<MetaInfo_FileInfo> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MetaInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.annouce_url)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.piece_length = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.pieces)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.length = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.annouce_url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.annouce_url);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.piece_length != 0 {
            my_size += ::protobuf::rt::value_size(3, self.piece_length, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.pieces {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(5, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.annouce_url.is_empty() {
            os.write_string(1, &self.annouce_url)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.piece_length != 0 {
            os.write_uint32(3, self.piece_length)?;
        }
        for v in &self.pieces {
            os.write_bytes(4, &v)?;
        };
        if self.length != 0 {
            os.write_uint64(5, self.length)?;
        }
        for v in &self.files {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetaInfo {
        MetaInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "annouce_url",
                    |m: &MetaInfo| { &m.annouce_url },
                    |m: &mut MetaInfo| { &mut m.annouce_url },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &MetaInfo| { &m.name },
                    |m: &mut MetaInfo| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "piece_length",
                    |m: &MetaInfo| { &m.piece_length },
                    |m: &mut MetaInfo| { &mut m.piece_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "pieces",
                    |m: &MetaInfo| { &m.pieces },
                    |m: &mut MetaInfo| { &mut m.pieces },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "length",
                    |m: &MetaInfo| { &m.length },
                    |m: &mut MetaInfo| { &mut m.length },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MetaInfo_FileInfo>>(
                    "files",
                    |m: &MetaInfo| { &m.files },
                    |m: &mut MetaInfo| { &mut m.files },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetaInfo>(
                    "MetaInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetaInfo {
        static mut instance: ::protobuf::lazy::Lazy<MetaInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetaInfo,
        };
        unsafe {
            instance.get(MetaInfo::new)
        }
    }
}

impl ::protobuf::Clear for MetaInfo {
    fn clear(&mut self) {
        self.annouce_url.clear();
        self.name.clear();
        self.piece_length = 0;
        self.pieces.clear();
        self.length = 0;
        self.files.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetaInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetaInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetaInfo_FileInfo {
    // message fields
    pub length: u64,
    pub paths: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetaInfo_FileInfo {
    fn default() -> &'a MetaInfo_FileInfo {
        <MetaInfo_FileInfo as ::protobuf::Message>::default_instance()
    }
}

impl MetaInfo_FileInfo {
    pub fn new() -> MetaInfo_FileInfo {
        ::std::default::Default::default()
    }

    // uint64 length = 1;


    pub fn get_length(&self) -> u64 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u64) {
        self.length = v;
    }

    // repeated string paths = 2;


    pub fn get_paths(&self) -> &[::std::string::String] {
        &self.paths
    }
    pub fn clear_paths(&mut self) {
        self.paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_paths(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_paths(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.paths
    }

    // Take field
    pub fn take_paths(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.paths, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MetaInfo_FileInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.length = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(1, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.length != 0 {
            os.write_uint64(1, self.length)?;
        }
        for v in &self.paths {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetaInfo_FileInfo {
        MetaInfo_FileInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "length",
                    |m: &MetaInfo_FileInfo| { &m.length },
                    |m: &mut MetaInfo_FileInfo| { &mut m.length },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "paths",
                    |m: &MetaInfo_FileInfo| { &m.paths },
                    |m: &mut MetaInfo_FileInfo| { &mut m.paths },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetaInfo_FileInfo>(
                    "MetaInfo_FileInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetaInfo_FileInfo {
        static mut instance: ::protobuf::lazy::Lazy<MetaInfo_FileInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetaInfo_FileInfo,
        };
        unsafe {
            instance.get(MetaInfo_FileInfo::new)
        }
    }
}

impl ::protobuf::Clear for MetaInfo_FileInfo {
    fn clear(&mut self) {
        self.length = 0;
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetaInfo_FileInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetaInfo_FileInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Peer {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub addrs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Peer {
    fn default() -> &'a Peer {
        <Peer as ::protobuf::Message>::default_instance()
    }
}

impl Peer {
    pub fn new() -> Peer {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // repeated bytes addrs = 2;


    pub fn get_addrs(&self) -> &[::std::vec::Vec<u8>] {
        &self.addrs
    }
    pub fn clear_addrs(&mut self) {
        self.addrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_addrs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.addrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addrs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.addrs
    }

    // Take field
    pub fn take_addrs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.addrs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Peer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.addrs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        for value in &self.addrs {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        for v in &self.addrs {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Peer {
        Peer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &Peer| { &m.id },
                    |m: &mut Peer| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "addrs",
                    |m: &Peer| { &m.addrs },
                    |m: &mut Peer| { &mut m.addrs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Peer>(
                    "Peer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Peer {
        static mut instance: ::protobuf::lazy::Lazy<Peer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Peer,
        };
        unsafe {
            instance.get(Peer::new)
        }
    }
}

impl ::protobuf::Clear for Peer {
    fn clear(&mut self) {
        self.id.clear();
        self.addrs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Peer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Peer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackerRequest {
    // message fields
    pub info_hash: ::std::vec::Vec<u8>,
    pub peer: ::protobuf::SingularPtrField<Peer>,
    pub uploaded: u64,
    pub downloaded: u64,
    pub left: u64,
    pub numwant: u32,
    pub event: TrackerRequest_EventType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackerRequest {
    fn default() -> &'a TrackerRequest {
        <TrackerRequest as ::protobuf::Message>::default_instance()
    }
}

impl TrackerRequest {
    pub fn new() -> TrackerRequest {
        ::std::default::Default::default()
    }

    // bytes info_hash = 1;


    pub fn get_info_hash(&self) -> &[u8] {
        &self.info_hash
    }
    pub fn clear_info_hash(&mut self) {
        self.info_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_info_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.info_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.info_hash
    }

    // Take field
    pub fn take_info_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.info_hash, ::std::vec::Vec::new())
    }

    // .structs.pb.Peer peer = 2;


    pub fn get_peer(&self) -> &Peer {
        self.peer.as_ref().unwrap_or_else(|| Peer::default_instance())
    }
    pub fn clear_peer(&mut self) {
        self.peer.clear();
    }

    pub fn has_peer(&self) -> bool {
        self.peer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer(&mut self, v: Peer) {
        self.peer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer(&mut self) -> &mut Peer {
        if self.peer.is_none() {
            self.peer.set_default();
        }
        self.peer.as_mut().unwrap()
    }

    // Take field
    pub fn take_peer(&mut self) -> Peer {
        self.peer.take().unwrap_or_else(|| Peer::new())
    }

    // uint64 uploaded = 3;


    pub fn get_uploaded(&self) -> u64 {
        self.uploaded
    }
    pub fn clear_uploaded(&mut self) {
        self.uploaded = 0;
    }

    // Param is passed by value, moved
    pub fn set_uploaded(&mut self, v: u64) {
        self.uploaded = v;
    }

    // uint64 downloaded = 4;


    pub fn get_downloaded(&self) -> u64 {
        self.downloaded
    }
    pub fn clear_downloaded(&mut self) {
        self.downloaded = 0;
    }

    // Param is passed by value, moved
    pub fn set_downloaded(&mut self, v: u64) {
        self.downloaded = v;
    }

    // uint64 left = 5;


    pub fn get_left(&self) -> u64 {
        self.left
    }
    pub fn clear_left(&mut self) {
        self.left = 0;
    }

    // Param is passed by value, moved
    pub fn set_left(&mut self, v: u64) {
        self.left = v;
    }

    // uint32 numwant = 6;


    pub fn get_numwant(&self) -> u32 {
        self.numwant
    }
    pub fn clear_numwant(&mut self) {
        self.numwant = 0;
    }

    // Param is passed by value, moved
    pub fn set_numwant(&mut self, v: u32) {
        self.numwant = v;
    }

    // .structs.pb.TrackerRequest.EventType event = 7;


    pub fn get_event(&self) -> TrackerRequest_EventType {
        self.event
    }
    pub fn clear_event(&mut self) {
        self.event = TrackerRequest_EventType::EMPTY;
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: TrackerRequest_EventType) {
        self.event = v;
    }
}

impl ::protobuf::Message for TrackerRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.peer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.info_hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.peer)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.uploaded = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.downloaded = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.left = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.numwant = tmp;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.info_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.info_hash);
        }
        if let Some(ref v) = self.peer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.uploaded != 0 {
            my_size += ::protobuf::rt::value_size(3, self.uploaded, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.downloaded != 0 {
            my_size += ::protobuf::rt::value_size(4, self.downloaded, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.left != 0 {
            my_size += ::protobuf::rt::value_size(5, self.left, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.numwant != 0 {
            my_size += ::protobuf::rt::value_size(6, self.numwant, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event != TrackerRequest_EventType::EMPTY {
            my_size += ::protobuf::rt::enum_size(7, self.event);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.info_hash.is_empty() {
            os.write_bytes(1, &self.info_hash)?;
        }
        if let Some(ref v) = self.peer.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.uploaded != 0 {
            os.write_uint64(3, self.uploaded)?;
        }
        if self.downloaded != 0 {
            os.write_uint64(4, self.downloaded)?;
        }
        if self.left != 0 {
            os.write_uint64(5, self.left)?;
        }
        if self.numwant != 0 {
            os.write_uint32(6, self.numwant)?;
        }
        if self.event != TrackerRequest_EventType::EMPTY {
            os.write_enum(7, self.event.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackerRequest {
        TrackerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "info_hash",
                    |m: &TrackerRequest| { &m.info_hash },
                    |m: &mut TrackerRequest| { &mut m.info_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Peer>>(
                    "peer",
                    |m: &TrackerRequest| { &m.peer },
                    |m: &mut TrackerRequest| { &mut m.peer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "uploaded",
                    |m: &TrackerRequest| { &m.uploaded },
                    |m: &mut TrackerRequest| { &mut m.uploaded },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "downloaded",
                    |m: &TrackerRequest| { &m.downloaded },
                    |m: &mut TrackerRequest| { &mut m.downloaded },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "left",
                    |m: &TrackerRequest| { &m.left },
                    |m: &mut TrackerRequest| { &mut m.left },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "numwant",
                    |m: &TrackerRequest| { &m.numwant },
                    |m: &mut TrackerRequest| { &mut m.numwant },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TrackerRequest_EventType>>(
                    "event",
                    |m: &TrackerRequest| { &m.event },
                    |m: &mut TrackerRequest| { &mut m.event },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TrackerRequest>(
                    "TrackerRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TrackerRequest {
        static mut instance: ::protobuf::lazy::Lazy<TrackerRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TrackerRequest,
        };
        unsafe {
            instance.get(TrackerRequest::new)
        }
    }
}

impl ::protobuf::Clear for TrackerRequest {
    fn clear(&mut self) {
        self.info_hash.clear();
        self.peer.clear();
        self.uploaded = 0;
        self.downloaded = 0;
        self.left = 0;
        self.numwant = 0;
        self.event = TrackerRequest_EventType::EMPTY;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TrackerRequest_EventType {
    EMPTY = 0,
    STARTED = 1,
    COMPLETED = 2,
    STOPPED = 3,
}

impl ::protobuf::ProtobufEnum for TrackerRequest_EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TrackerRequest_EventType> {
        match value {
            0 => ::std::option::Option::Some(TrackerRequest_EventType::EMPTY),
            1 => ::std::option::Option::Some(TrackerRequest_EventType::STARTED),
            2 => ::std::option::Option::Some(TrackerRequest_EventType::COMPLETED),
            3 => ::std::option::Option::Some(TrackerRequest_EventType::STOPPED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TrackerRequest_EventType] = &[
            TrackerRequest_EventType::EMPTY,
            TrackerRequest_EventType::STARTED,
            TrackerRequest_EventType::COMPLETED,
            TrackerRequest_EventType::STOPPED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TrackerRequest_EventType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TrackerRequest_EventType {
}

impl ::std::default::Default for TrackerRequest_EventType {
    fn default() -> Self {
        TrackerRequest_EventType::EMPTY
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackerRequest_EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackerResponse {
    // message fields
    pub field_type: TrackerResponse_TrackerResponseType,
    pub failure_reason: ::std::string::String,
    pub complete: u32,
    pub incomplete: u32,
    pub interval: u32,
    pub min_interval: u32,
    pub peers: ::protobuf::RepeatedField<Peer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackerResponse {
    fn default() -> &'a TrackerResponse {
        <TrackerResponse as ::protobuf::Message>::default_instance()
    }
}

impl TrackerResponse {
    pub fn new() -> TrackerResponse {
        ::std::default::Default::default()
    }

    // .structs.pb.TrackerResponse.TrackerResponseType type = 1;


    pub fn get_field_type(&self) -> TrackerResponse_TrackerResponseType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = TrackerResponse_TrackerResponseType::FAILURE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: TrackerResponse_TrackerResponseType) {
        self.field_type = v;
    }

    // string failure_reason = 2;


    pub fn get_failure_reason(&self) -> &str {
        &self.failure_reason
    }
    pub fn clear_failure_reason(&mut self) {
        self.failure_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_failure_reason(&mut self, v: ::std::string::String) {
        self.failure_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_failure_reason(&mut self) -> &mut ::std::string::String {
        &mut self.failure_reason
    }

    // Take field
    pub fn take_failure_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.failure_reason, ::std::string::String::new())
    }

    // uint32 complete = 3;


    pub fn get_complete(&self) -> u32 {
        self.complete
    }
    pub fn clear_complete(&mut self) {
        self.complete = 0;
    }

    // Param is passed by value, moved
    pub fn set_complete(&mut self, v: u32) {
        self.complete = v;
    }

    // uint32 incomplete = 4;


    pub fn get_incomplete(&self) -> u32 {
        self.incomplete
    }
    pub fn clear_incomplete(&mut self) {
        self.incomplete = 0;
    }

    // Param is passed by value, moved
    pub fn set_incomplete(&mut self, v: u32) {
        self.incomplete = v;
    }

    // uint32 interval = 5;


    pub fn get_interval(&self) -> u32 {
        self.interval
    }
    pub fn clear_interval(&mut self) {
        self.interval = 0;
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: u32) {
        self.interval = v;
    }

    // uint32 min_interval = 6;


    pub fn get_min_interval(&self) -> u32 {
        self.min_interval
    }
    pub fn clear_min_interval(&mut self) {
        self.min_interval = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_interval(&mut self, v: u32) {
        self.min_interval = v;
    }

    // repeated .structs.pb.Peer peers = 7;


    pub fn get_peers(&self) -> &[Peer] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<Peer>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<Peer> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<Peer> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TrackerResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.failure_reason)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.complete = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.incomplete = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.interval = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.min_interval = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != TrackerResponse_TrackerResponseType::FAILURE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.failure_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.failure_reason);
        }
        if self.complete != 0 {
            my_size += ::protobuf::rt::value_size(3, self.complete, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.incomplete != 0 {
            my_size += ::protobuf::rt::value_size(4, self.incomplete, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interval != 0 {
            my_size += ::protobuf::rt::value_size(5, self.interval, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_interval != 0 {
            my_size += ::protobuf::rt::value_size(6, self.min_interval, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != TrackerResponse_TrackerResponseType::FAILURE {
            os.write_enum(1, self.field_type.value())?;
        }
        if !self.failure_reason.is_empty() {
            os.write_string(2, &self.failure_reason)?;
        }
        if self.complete != 0 {
            os.write_uint32(3, self.complete)?;
        }
        if self.incomplete != 0 {
            os.write_uint32(4, self.incomplete)?;
        }
        if self.interval != 0 {
            os.write_uint32(5, self.interval)?;
        }
        if self.min_interval != 0 {
            os.write_uint32(6, self.min_interval)?;
        }
        for v in &self.peers {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackerResponse {
        TrackerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TrackerResponse_TrackerResponseType>>(
                    "type",
                    |m: &TrackerResponse| { &m.field_type },
                    |m: &mut TrackerResponse| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "failure_reason",
                    |m: &TrackerResponse| { &m.failure_reason },
                    |m: &mut TrackerResponse| { &mut m.failure_reason },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "complete",
                    |m: &TrackerResponse| { &m.complete },
                    |m: &mut TrackerResponse| { &mut m.complete },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "incomplete",
                    |m: &TrackerResponse| { &m.incomplete },
                    |m: &mut TrackerResponse| { &mut m.incomplete },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "interval",
                    |m: &TrackerResponse| { &m.interval },
                    |m: &mut TrackerResponse| { &mut m.interval },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "min_interval",
                    |m: &TrackerResponse| { &m.min_interval },
                    |m: &mut TrackerResponse| { &mut m.min_interval },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Peer>>(
                    "peers",
                    |m: &TrackerResponse| { &m.peers },
                    |m: &mut TrackerResponse| { &mut m.peers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TrackerResponse>(
                    "TrackerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TrackerResponse {
        static mut instance: ::protobuf::lazy::Lazy<TrackerResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TrackerResponse,
        };
        unsafe {
            instance.get(TrackerResponse::new)
        }
    }
}

impl ::protobuf::Clear for TrackerResponse {
    fn clear(&mut self) {
        self.field_type = TrackerResponse_TrackerResponseType::FAILURE;
        self.failure_reason.clear();
        self.complete = 0;
        self.incomplete = 0;
        self.interval = 0;
        self.min_interval = 0;
        self.peers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TrackerResponse_TrackerResponseType {
    FAILURE = 0,
    SUCCESS = 1,
}

impl ::protobuf::ProtobufEnum for TrackerResponse_TrackerResponseType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TrackerResponse_TrackerResponseType> {
        match value {
            0 => ::std::option::Option::Some(TrackerResponse_TrackerResponseType::FAILURE),
            1 => ::std::option::Option::Some(TrackerResponse_TrackerResponseType::SUCCESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TrackerResponse_TrackerResponseType] = &[
            TrackerResponse_TrackerResponseType::FAILURE,
            TrackerResponse_TrackerResponseType::SUCCESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TrackerResponse_TrackerResponseType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TrackerResponse_TrackerResponseType {
}

impl ::std::default::Default for TrackerResponse_TrackerResponseType {
    fn default() -> Self {
        TrackerResponse_TrackerResponseType::FAILURE
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackerResponse_TrackerResponseType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerMessage {
    // message fields
    pub field_type: PeerMessage_MessageType,
    pub index_field: ::std::vec::Vec<u8>,
    pub have_index: u32,
    pub request: ::protobuf::SingularPtrField<PeerMessage_Request>,
    pub piece: ::protobuf::SingularPtrField<PeerMessage_Piece>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerMessage {
    fn default() -> &'a PeerMessage {
        <PeerMessage as ::protobuf::Message>::default_instance()
    }
}

impl PeerMessage {
    pub fn new() -> PeerMessage {
        ::std::default::Default::default()
    }

    // .structs.pb.PeerMessage.MessageType type = 1;


    pub fn get_field_type(&self) -> PeerMessage_MessageType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = PeerMessage_MessageType::CHOKE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: PeerMessage_MessageType) {
        self.field_type = v;
    }

    // bytes index_field = 2;


    pub fn get_index_field(&self) -> &[u8] {
        &self.index_field
    }
    pub fn clear_index_field(&mut self) {
        self.index_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_index_field(&mut self, v: ::std::vec::Vec<u8>) {
        self.index_field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index_field(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.index_field
    }

    // Take field
    pub fn take_index_field(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.index_field, ::std::vec::Vec::new())
    }

    // uint32 have_index = 4;


    pub fn get_have_index(&self) -> u32 {
        self.have_index
    }
    pub fn clear_have_index(&mut self) {
        self.have_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_have_index(&mut self, v: u32) {
        self.have_index = v;
    }

    // .structs.pb.PeerMessage.Request request = 5;


    pub fn get_request(&self) -> &PeerMessage_Request {
        self.request.as_ref().unwrap_or_else(|| PeerMessage_Request::default_instance())
    }
    pub fn clear_request(&mut self) {
        self.request.clear();
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: PeerMessage_Request) {
        self.request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut PeerMessage_Request {
        if self.request.is_none() {
            self.request.set_default();
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> PeerMessage_Request {
        self.request.take().unwrap_or_else(|| PeerMessage_Request::new())
    }

    // .structs.pb.PeerMessage.Piece piece = 6;


    pub fn get_piece(&self) -> &PeerMessage_Piece {
        self.piece.as_ref().unwrap_or_else(|| PeerMessage_Piece::default_instance())
    }
    pub fn clear_piece(&mut self) {
        self.piece.clear();
    }

    pub fn has_piece(&self) -> bool {
        self.piece.is_some()
    }

    // Param is passed by value, moved
    pub fn set_piece(&mut self, v: PeerMessage_Piece) {
        self.piece = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_piece(&mut self) -> &mut PeerMessage_Piece {
        if self.piece.is_none() {
            self.piece.set_default();
        }
        self.piece.as_mut().unwrap()
    }

    // Take field
    pub fn take_piece(&mut self) -> PeerMessage_Piece {
        self.piece.take().unwrap_or_else(|| PeerMessage_Piece::new())
    }
}

impl ::protobuf::Message for PeerMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.piece {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.index_field)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.have_index = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.piece)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != PeerMessage_MessageType::CHOKE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.index_field.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.index_field);
        }
        if self.have_index != 0 {
            my_size += ::protobuf::rt::value_size(4, self.have_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.piece.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != PeerMessage_MessageType::CHOKE {
            os.write_enum(1, self.field_type.value())?;
        }
        if !self.index_field.is_empty() {
            os.write_bytes(2, &self.index_field)?;
        }
        if self.have_index != 0 {
            os.write_uint32(4, self.have_index)?;
        }
        if let Some(ref v) = self.request.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.piece.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerMessage {
        PeerMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PeerMessage_MessageType>>(
                    "type",
                    |m: &PeerMessage| { &m.field_type },
                    |m: &mut PeerMessage| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "index_field",
                    |m: &PeerMessage| { &m.index_field },
                    |m: &mut PeerMessage| { &mut m.index_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "have_index",
                    |m: &PeerMessage| { &m.have_index },
                    |m: &mut PeerMessage| { &mut m.have_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PeerMessage_Request>>(
                    "request",
                    |m: &PeerMessage| { &m.request },
                    |m: &mut PeerMessage| { &mut m.request },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PeerMessage_Piece>>(
                    "piece",
                    |m: &PeerMessage| { &m.piece },
                    |m: &mut PeerMessage| { &mut m.piece },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerMessage>(
                    "PeerMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerMessage {
        static mut instance: ::protobuf::lazy::Lazy<PeerMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerMessage,
        };
        unsafe {
            instance.get(PeerMessage::new)
        }
    }
}

impl ::protobuf::Clear for PeerMessage {
    fn clear(&mut self) {
        self.field_type = PeerMessage_MessageType::CHOKE;
        self.index_field.clear();
        self.have_index = 0;
        self.request.clear();
        self.piece.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerMessage_Request {
    // message fields
    pub index: u32,
    pub begin: u32,
    pub length: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerMessage_Request {
    fn default() -> &'a PeerMessage_Request {
        <PeerMessage_Request as ::protobuf::Message>::default_instance()
    }
}

impl PeerMessage_Request {
    pub fn new() -> PeerMessage_Request {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // uint32 begin = 2;


    pub fn get_begin(&self) -> u32 {
        self.begin
    }
    pub fn clear_begin(&mut self) {
        self.begin = 0;
    }

    // Param is passed by value, moved
    pub fn set_begin(&mut self, v: u32) {
        self.begin = v;
    }

    // uint32 length = 3;


    pub fn get_length(&self) -> u32 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = v;
    }
}

impl ::protobuf::Message for PeerMessage_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.begin = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.begin != 0 {
            my_size += ::protobuf::rt::value_size(2, self.begin, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(3, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if self.begin != 0 {
            os.write_uint32(2, self.begin)?;
        }
        if self.length != 0 {
            os.write_uint32(3, self.length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerMessage_Request {
        PeerMessage_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &PeerMessage_Request| { &m.index },
                    |m: &mut PeerMessage_Request| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "begin",
                    |m: &PeerMessage_Request| { &m.begin },
                    |m: &mut PeerMessage_Request| { &mut m.begin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "length",
                    |m: &PeerMessage_Request| { &m.length },
                    |m: &mut PeerMessage_Request| { &mut m.length },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerMessage_Request>(
                    "PeerMessage_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerMessage_Request {
        static mut instance: ::protobuf::lazy::Lazy<PeerMessage_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerMessage_Request,
        };
        unsafe {
            instance.get(PeerMessage_Request::new)
        }
    }
}

impl ::protobuf::Clear for PeerMessage_Request {
    fn clear(&mut self) {
        self.index = 0;
        self.begin = 0;
        self.length = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerMessage_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerMessage_Piece {
    // message fields
    pub index: u32,
    pub begin: u32,
    pub piece: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerMessage_Piece {
    fn default() -> &'a PeerMessage_Piece {
        <PeerMessage_Piece as ::protobuf::Message>::default_instance()
    }
}

impl PeerMessage_Piece {
    pub fn new() -> PeerMessage_Piece {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // uint32 begin = 2;


    pub fn get_begin(&self) -> u32 {
        self.begin
    }
    pub fn clear_begin(&mut self) {
        self.begin = 0;
    }

    // Param is passed by value, moved
    pub fn set_begin(&mut self, v: u32) {
        self.begin = v;
    }

    // bytes piece = 3;


    pub fn get_piece(&self) -> &[u8] {
        &self.piece
    }
    pub fn clear_piece(&mut self) {
        self.piece.clear();
    }

    // Param is passed by value, moved
    pub fn set_piece(&mut self, v: ::std::vec::Vec<u8>) {
        self.piece = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_piece(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.piece
    }

    // Take field
    pub fn take_piece(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.piece, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PeerMessage_Piece {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.begin = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.piece)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.begin != 0 {
            my_size += ::protobuf::rt::value_size(2, self.begin, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.piece.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.piece);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if self.begin != 0 {
            os.write_uint32(2, self.begin)?;
        }
        if !self.piece.is_empty() {
            os.write_bytes(3, &self.piece)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerMessage_Piece {
        PeerMessage_Piece::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &PeerMessage_Piece| { &m.index },
                    |m: &mut PeerMessage_Piece| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "begin",
                    |m: &PeerMessage_Piece| { &m.begin },
                    |m: &mut PeerMessage_Piece| { &mut m.begin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "piece",
                    |m: &PeerMessage_Piece| { &m.piece },
                    |m: &mut PeerMessage_Piece| { &mut m.piece },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerMessage_Piece>(
                    "PeerMessage_Piece",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerMessage_Piece {
        static mut instance: ::protobuf::lazy::Lazy<PeerMessage_Piece> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerMessage_Piece,
        };
        unsafe {
            instance.get(PeerMessage_Piece::new)
        }
    }
}

impl ::protobuf::Clear for PeerMessage_Piece {
    fn clear(&mut self) {
        self.index = 0;
        self.begin = 0;
        self.piece.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerMessage_Piece {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage_Piece {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PeerMessage_MessageType {
    CHOKE = 0,
    UN_CHOKE = 1,
    INTERESTED = 2,
    NOT_INTERESTED = 3,
    HAVE = 4,
    BITFIELD = 5,
    REQUEST = 6,
    PIECE = 7,
    CANCEL = 8,
}

impl ::protobuf::ProtobufEnum for PeerMessage_MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PeerMessage_MessageType> {
        match value {
            0 => ::std::option::Option::Some(PeerMessage_MessageType::CHOKE),
            1 => ::std::option::Option::Some(PeerMessage_MessageType::UN_CHOKE),
            2 => ::std::option::Option::Some(PeerMessage_MessageType::INTERESTED),
            3 => ::std::option::Option::Some(PeerMessage_MessageType::NOT_INTERESTED),
            4 => ::std::option::Option::Some(PeerMessage_MessageType::HAVE),
            5 => ::std::option::Option::Some(PeerMessage_MessageType::BITFIELD),
            6 => ::std::option::Option::Some(PeerMessage_MessageType::REQUEST),
            7 => ::std::option::Option::Some(PeerMessage_MessageType::PIECE),
            8 => ::std::option::Option::Some(PeerMessage_MessageType::CANCEL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PeerMessage_MessageType] = &[
            PeerMessage_MessageType::CHOKE,
            PeerMessage_MessageType::UN_CHOKE,
            PeerMessage_MessageType::INTERESTED,
            PeerMessage_MessageType::NOT_INTERESTED,
            PeerMessage_MessageType::HAVE,
            PeerMessage_MessageType::BITFIELD,
            PeerMessage_MessageType::REQUEST,
            PeerMessage_MessageType::PIECE,
            PeerMessage_MessageType::CANCEL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("PeerMessage_MessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for PeerMessage_MessageType {
}

impl ::std::default::Default for PeerMessage_MessageType {
    fn default() -> Self {
        PeerMessage_MessageType::CHOKE
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage_MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tbtt.proto\x12\nstructs.pb\"\x81\x02\n\x08MetaInfo\x12\x1f\n\x0bannou\
    ce_url\x18\x01\x20\x01(\tR\nannouceUrl\x12\x12\n\x04name\x18\x02\x20\x01\
    (\tR\x04name\x12!\n\x0cpiece_length\x18\x03\x20\x01(\rR\x0bpieceLength\
    \x12\x16\n\x06pieces\x18\x04\x20\x03(\x0cR\x06pieces\x12\x16\n\x06length\
    \x18\x05\x20\x01(\x04R\x06length\x123\n\x05files\x18\x06\x20\x03(\x0b2\
    \x1d.structs.pb.MetaInfo.FileInfoR\x05files\x1a8\n\x08FileInfo\x12\x16\n\
    \x06length\x18\x01\x20\x01(\x04R\x06length\x12\x14\n\x05paths\x18\x02\
    \x20\x03(\tR\x05paths\",\n\x04Peer\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\
    \x02id\x12\x14\n\x05addrs\x18\x02\x20\x03(\x0cR\x05addrs\"\xba\x02\n\x0e\
    TrackerRequest\x12\x1b\n\tinfo_hash\x18\x01\x20\x01(\x0cR\x08infoHash\
    \x12$\n\x04peer\x18\x02\x20\x01(\x0b2\x10.structs.pb.PeerR\x04peer\x12\
    \x1a\n\x08uploaded\x18\x03\x20\x01(\x04R\x08uploaded\x12\x1e\n\ndownload\
    ed\x18\x04\x20\x01(\x04R\ndownloaded\x12\x12\n\x04left\x18\x05\x20\x01(\
    \x04R\x04left\x12\x18\n\x07numwant\x18\x06\x20\x01(\rR\x07numwant\x12:\n\
    \x05event\x18\x07\x20\x01(\x0e2$.structs.pb.TrackerRequest.EventTypeR\
    \x05event\"?\n\tEventType\x12\t\n\x05EMPTY\x10\0\x12\x0b\n\x07STARTED\
    \x10\x01\x12\r\n\tCOMPLETED\x10\x02\x12\x0b\n\x07STOPPED\x10\x03\"\xd1\
    \x02\n\x0fTrackerResponse\x12C\n\x04type\x18\x01\x20\x01(\x0e2/.structs.\
    pb.TrackerResponse.TrackerResponseTypeR\x04type\x12%\n\x0efailure_reason\
    \x18\x02\x20\x01(\tR\rfailureReason\x12\x1a\n\x08complete\x18\x03\x20\
    \x01(\rR\x08complete\x12\x1e\n\nincomplete\x18\x04\x20\x01(\rR\nincomple\
    te\x12\x1a\n\x08interval\x18\x05\x20\x01(\rR\x08interval\x12!\n\x0cmin_i\
    nterval\x18\x06\x20\x01(\rR\x0bminInterval\x12&\n\x05peers\x18\x07\x20\
    \x03(\x0b2\x10.structs.pb.PeerR\x05peers\"/\n\x13TrackerResponseType\x12\
    \x0b\n\x07FAILURE\x10\0\x12\x0b\n\x07SUCCESS\x10\x01\"\x99\x04\n\x0bPeer\
    Message\x127\n\x04type\x18\x01\x20\x01(\x0e2#.structs.pb.PeerMessage.Mes\
    sageTypeR\x04type\x12\x1f\n\x0bindex_field\x18\x02\x20\x01(\x0cR\nindexF\
    ield\x12\x1d\n\nhave_index\x18\x04\x20\x01(\rR\thaveIndex\x129\n\x07requ\
    est\x18\x05\x20\x01(\x0b2\x1f.structs.pb.PeerMessage.RequestR\x07request\
    \x123\n\x05piece\x18\x06\x20\x01(\x0b2\x1d.structs.pb.PeerMessage.PieceR\
    \x05piece\x1aM\n\x07Request\x12\x14\n\x05index\x18\x01\x20\x01(\rR\x05in\
    dex\x12\x14\n\x05begin\x18\x02\x20\x01(\rR\x05begin\x12\x16\n\x06length\
    \x18\x03\x20\x01(\rR\x06length\x1aI\n\x05Piece\x12\x14\n\x05index\x18\
    \x01\x20\x01(\rR\x05index\x12\x14\n\x05begin\x18\x02\x20\x01(\rR\x05begi\
    n\x12\x14\n\x05piece\x18\x03\x20\x01(\x0cR\x05piece\"\x86\x01\n\x0bMessa\
    geType\x12\t\n\x05CHOKE\x10\0\x12\x0c\n\x08UN_CHOKE\x10\x01\x12\x0e\n\nI\
    NTERESTED\x10\x02\x12\x12\n\x0eNOT_INTERESTED\x10\x03\x12\x08\n\x04HAVE\
    \x10\x04\x12\x0c\n\x08BITFIELD\x10\x05\x12\x0b\n\x07REQUEST\x10\x06\x12\
    \t\n\x05PIECE\x10\x07\x12\n\n\x06CANCEL\x10\x08J\xa7/\n\x07\x12\x05\0\0\
    \xa8\x01\x02\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\
    \0\x13\n\n\n\x02\x04\0\x12\x04\x03\0(\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x03\x08\x10\nO\n\x04\x04\0\x03\0\x12\x04\x06\x04\x0e\x05\x1aA\x20repres\
    ents\x20a\x20single\x20file\x20which\x20is\x20part\x20of\x20a\x20directo\
    ry\x20structure\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x06\x0c\x14\n2\n\
    \x06\x04\0\x03\0\x02\0\x12\x03\t\x08\x1a\x1a#\x20The\x20length\x20of\x20\
    the\x20file,\x20in\x20bytes.\n\n\x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\x04\
    \t\x08\x06\x16\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\t\x08\x0e\n\x0e\
    \n\x07\x04\0\x03\0\x02\0\x01\x12\x03\t\x0f\x15\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x03\x12\x03\t\x18\x19\n\xa7\x01\n\x06\x04\0\x03\0\x02\x01\x12\x03\
    \r\x08\"\x1a\x97\x01\x20A\x20list\x20of\x20UTF-8\x20encoded\x20strings\
    \x20corresponding\x20to\x20subdirectory\x20names,\x20the\x20last\x20of\
    \x20which\x20is\x20the\x20actual\x20file\x20name.\n\x20a\x20zero\x20leng\
    th\x20list\x20is\x20an\x20error\x20case.\n\n\x0e\n\x07\x04\0\x03\0\x02\
    \x01\x04\x12\x03\r\x08\x10\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\r\
    \x11\x17\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\r\x18\x1d\n\x0e\n\
    \x07\x04\0\x03\0\x02\x01\x03\x12\x03\r\x20!\n&\n\x04\x04\0\x02\0\x12\x03\
    \x11\x04\x1b\x1a\x19\x20The\x20URL\x20of\x20the\x20tracker.\n\n\r\n\x05\
    \x04\0\x02\0\x04\x12\x04\x11\x04\x0e\x05\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x11\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x0b\x16\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x11\x19\x1a\n\xdc\x01\n\x04\x04\0\x02\x01\
    \x12\x03\x16\x04\x14\x1a\xce\x01\x20A\x20UTF-8\x20encoded\x20string\x20w\
    hich\x20is\x20the\x20suggested\x20name\x20to\x20save\x20the\x20file\x20(\
    or\x20directory)\x20as\n\x20In\x20the\x20single\x20file\x20case,\x20the\
    \x20name\x20key\x20is\x20the\x20name\x20of\x20a\x20file,\n\x20in\x20the\
    \x20muliple\x20file\x20case,\x20it's\x20the\x20name\x20of\x20a\x20direct\
    ory.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x16\x04\x11\x1b\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x16\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x16\x12\x13\ni\n\
    \x04\x04\0\x02\x02\x12\x03\x1a\x04\x1c\x1a\\\x20The\x20number\x20of\x20b\
    ytes\x20in\x20each\x20piece\x20the\x20file\x20is\x20split\x20into.\n\x20\
    is\x20almost\x20always\x20a\x20power\x20of\x20two\n\n\r\n\x05\x04\0\x02\
    \x02\x04\x12\x04\x1a\x04\x16\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\
    \x1a\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x1a\x0b\x17\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x1a\x1a\x1b\n\xbe\x01\n\x04\x04\0\x02\x03\x12\
    \x03\x1f\x04\x1e\x1a\xb0\x01\x20maps\x20to\x20a\x20string\x20whose\x20le\
    ngth\x20is\x20a\x20multiple\x20of\x2020.\n\x20It\x20is\x20to\x20be\x20su\
    bdivided\x20into\x20strings\x20of\x20length\x2020,\x20each\x20of\x20whic\
    h\x20is\x20the\x20SHA1\x20hash\x20of\x20the\x20piece\x20at\x20the\n\x20c\
    orresponding\x20index.\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x1f\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x1f\r\x12\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\x1f\x13\x19\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x1f\x1c\x1d\nA\n\x04\x04\0\x02\x04\x12\x03#\x04\x16\x1a4\x20The\x20leng\
    th\x20of\x20the\x20file\x20in\x20bytes.\n\x20only\x20single\x20file\n\n\
    \r\n\x05\x04\0\x02\x04\x04\x12\x04#\x04\x1f\x1e\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03#\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03#\x0b\x11\n\
    \x0c\n\x05\x04\0\x02\x04\x03\x12\x03#\x14\x15\n\"\n\x04\x04\0\x02\x05\
    \x12\x03&\x04\x20\x1a\x15\x20only\x20multiple\x20files\n\n\x0c\n\x05\x04\
    \0\x02\x05\x04\x12\x03&\x04\x0c\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03&\r\
    \x15\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03&\x16\x1b\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x03&\x1e\x1f\n\n\n\x02\x04\x01\x12\x04*\01\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03*\x08\x0c\n\"\n\x04\x04\x01\x02\0\x12\x03,\x04\
    \x11\x1a\x15\x20ID\x20of\x20a\x20given\x20peer.\n\n\r\n\x05\x04\x01\x02\
    \0\x04\x12\x04,\x04*\x0e\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03,\x04\t\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03,\n\x0c\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03,\x0f\x10\n*\n\x04\x04\x01\x02\x01\x12\x03/\x04\x1d\x1a\x1d\
    \x20multiaddrs\x20for\x20a\x20given\x20peer\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03/\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03/\r\x12\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03/\x13\x18\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03/\x1b\x1c\n\n\n\x02\x04\x02\x12\x043\0Q\x01\n\n\n\
    \x03\x04\x02\x01\x12\x033\x08\x16\n\x0c\n\x04\x04\x02\x04\0\x12\x045\x04\
    :\x05\n\x0c\n\x05\x04\x02\x04\0\x01\x12\x035\t\x12\n\r\n\x06\x04\x02\x04\
    \0\x02\0\x12\x036\x08\x12\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\x12\x036\
    \x08\r\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\x12\x036\x10\x11\n\r\n\x06\
    \x04\x02\x04\0\x02\x01\x12\x037\x08\x14\n\x0e\n\x07\x04\x02\x04\0\x02\
    \x01\x01\x12\x037\x08\x0f\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x037\
    \x12\x13\n\r\n\x06\x04\x02\x04\0\x02\x02\x12\x038\x08\x16\n\x0e\n\x07\
    \x04\x02\x04\0\x02\x02\x01\x12\x038\x08\x11\n\x0e\n\x07\x04\x02\x04\0\
    \x02\x02\x02\x12\x038\x14\x15\n\r\n\x06\x04\x02\x04\0\x02\x03\x12\x039\
    \x08\x14\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x01\x12\x039\x08\x0f\n\x0e\n\
    \x07\x04\x02\x04\0\x02\x03\x02\x12\x039\x12\x13\nc\n\x04\x04\x02\x02\0\
    \x12\x03=\x04\x18\x1aV\x20The\x2020\x20byte\x20sha1\x20hash\x20of\x20the\
    \x20bencoded\x20form\x20of\x20the\x20info\x20value\x20from\x20the\x20met\
    ainfo\x20file.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04=\x04:\x05\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03=\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03=\n\x13\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03=\x16\x17\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03?\x04\x12\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04?\
    \x04=\x18\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03?\x04\x08\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03?\t\r\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x03?\x10\x11\n/\n\x04\x04\x02\x02\x02\x12\x03B\x04\x18\x1a\"\x20The\x20\
    total\x20amount\x20uploaded\x20so\x20far\n\n\r\n\x05\x04\x02\x02\x02\x04\
    \x12\x04B\x04?\x12\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03B\x04\n\n\x0c\
    \n\x05\x04\x02\x02\x02\x01\x12\x03B\x0b\x13\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03B\x16\x17\nM\n\x04\x04\x02\x02\x03\x12\x03E\x04\x1a\x1a@\x20\
    The\x20total\x20amount\x20downloaded\x20so\x20far,\x20encoded\x20in\x20b\
    ase\x20ten\x20ascii.\n\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04E\x04B\x18\n\
    \x0c\n\x05\x04\x02\x02\x03\x05\x12\x03E\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x03\x01\x12\x03E\x0b\x15\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03E\x18\
    \x19\nC\n\x04\x04\x02\x02\x04\x12\x03H\x04\x14\x1a6\x20The\x20number\x20\
    of\x20bytes\x20this\x20peer\x20still\x20has\x20to\x20download.\n\n\r\n\
    \x05\x04\x02\x02\x04\x04\x12\x04H\x04E\x1a\n\x0c\n\x05\x04\x02\x02\x04\
    \x05\x12\x03H\x04\n\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03H\x0b\x0f\n\
    \x0c\n\x05\x04\x02\x02\x04\x03\x12\x03H\x12\x13\n\xb2\x01\n\x04\x04\x02\
    \x02\x05\x12\x03L\x04\x17\x1a\xa4\x01\x20Optional.\x20Number\x20of\x20pe\
    ers\x20that\x20the\x20client\x20would\x20like\x20to\x20receive\x20from\
    \x20the\x20tracker.\n\x20This\x20value\x20is\x20permitted\x20to\x20be\
    \x20zero.\x20If\x20omitted,\x20typically\x20defaults\x20to\x2050\x20peer\
    s.\n\n\r\n\x05\x04\x02\x02\x05\x04\x12\x04L\x04H\x14\n\x0c\n\x05\x04\x02\
    \x02\x05\x05\x12\x03L\x04\n\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03L\x0b\
    \x12\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03L\x15\x16\n\"\n\x04\x04\x02\
    \x02\x06\x12\x03O\x04\x18\x1a\x15\x20optional\x20event\x20type\n\n\r\n\
    \x05\x04\x02\x02\x06\x04\x12\x04O\x04L\x17\n\x0c\n\x05\x04\x02\x02\x06\
    \x06\x12\x03O\x04\r\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\x03O\x0e\x13\n\
    \x0c\n\x05\x04\x02\x02\x06\x03\x12\x03O\x16\x17\n\n\n\x02\x04\x03\x12\
    \x04S\0n\x01\n\n\n\x03\x04\x03\x01\x12\x03S\x08\x17\n\x0c\n\x04\x04\x03\
    \x04\0\x12\x04U\x04X\x05\n\x0c\n\x05\x04\x03\x04\0\x01\x12\x03U\t\x1c\n\
    \r\n\x06\x04\x03\x04\0\x02\0\x12\x03V\x08\x14\n\x0e\n\x07\x04\x03\x04\0\
    \x02\0\x01\x12\x03V\x08\x0f\n\x0e\n\x07\x04\x03\x04\0\x02\0\x02\x12\x03V\
    \x12\x13\n\r\n\x06\x04\x03\x04\0\x02\x01\x12\x03W\x08\x14\n\x0e\n\x07\
    \x04\x03\x04\0\x02\x01\x01\x12\x03W\x08\x0f\n\x0e\n\x07\x04\x03\x04\0\
    \x02\x01\x02\x12\x03W\x12\x13\n\x0b\n\x04\x04\x03\x02\0\x12\x03Z\x04!\n\
    \r\n\x05\x04\x03\x02\0\x04\x12\x04Z\x04X\x05\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03Z\x04\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03Z\x18\x1c\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03Z\x1f\x20\n$\n\x04\x04\x03\x02\x01\
    \x12\x03]\x04\x1e\x1a\x17\x20when\x20the\x20query\x20failed\n\n\r\n\x05\
    \x04\x03\x02\x01\x04\x12\x04]\x04Z!\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x03]\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03]\x0b\x19\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03]\x1c\x1d\nA\n\x04\x04\x03\x02\x02\x12\x03`\
    \x04\x18\x1a4\x20number\x20of\x20peers\x20with\x20the\x20entire\x20file,\
    \x20i.e.\x20seeders\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04`\x04]\x1e\n\
    \x0c\n\x05\x04\x03\x02\x02\x05\x12\x03`\x04\n\n\x0c\n\x05\x04\x03\x02\
    \x02\x01\x12\x03`\x0b\x13\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03`\x16\
    \x17\n9\n\x04\x04\x03\x02\x03\x12\x03c\x04\x1a\x1a,\x20number\x20of\x20n\
    on-seeder\x20peers,\x20aka\x20\"leechers\"\n\n\r\n\x05\x04\x03\x02\x03\
    \x04\x12\x04c\x04`\x18\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03c\x04\n\n\
    \x0c\n\x05\x04\x03\x02\x03\x01\x12\x03c\x0b\x15\n\x0c\n\x05\x04\x03\x02\
    \x03\x03\x12\x03c\x18\x19\n[\n\x04\x04\x03\x02\x04\x12\x03f\x04\x18\x1aN\
    \x20the\x20number\x20of\x20seconds\x20the\x20downloader\x20should\x20wai\
    t\x20between\x20regular\x20rerequests.\n\n\r\n\x05\x04\x03\x02\x04\x04\
    \x12\x04f\x04c\x1a\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03f\x04\n\n\x0c\
    \n\x05\x04\x03\x02\x04\x01\x12\x03f\x0b\x13\n\x0c\n\x05\x04\x03\x02\x04\
    \x03\x12\x03f\x16\x17\nk\n\x04\x04\x03\x02\x05\x12\x03j\x04\x1c\x1a^\x20\
    Minimum\x20announce\x20interval.\n\x20If\x20present\x20clients\x20must\
    \x20not\x20reannounce\x20more\x20frequently\x20than\x20this\n\n\r\n\x05\
    \x04\x03\x02\x05\x04\x12\x04j\x04f\x18\n\x0c\n\x05\x04\x03\x02\x05\x05\
    \x12\x03j\x04\n\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03j\x0b\x17\n\x0c\n\
    \x05\x04\x03\x02\x05\x03\x12\x03j\x1a\x1b\n\x1d\n\x04\x04\x03\x02\x06\
    \x12\x03m\x04\x1c\x1a\x10\x20matching\x20peers\n\n\x0c\n\x05\x04\x03\x02\
    \x06\x04\x12\x03m\x04\x0c\n\x0c\n\x05\x04\x03\x02\x06\x06\x12\x03m\r\x11\
    \n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03m\x12\x17\n\x0c\n\x05\x04\x03\
    \x02\x06\x03\x12\x03m\x1a\x1b\n-\n\x02\x04\x04\x12\x05q\0\xa8\x01\x01\
    \x1a\x20\x20messages\x20for\x20the\x20peer\x20protocol\n\n\n\n\x03\x04\
    \x04\x01\x12\x03q\x08\x13\n\x0c\n\x04\x04\x04\x04\0\x12\x04r\x04|\x05\n\
    \x0c\n\x05\x04\x04\x04\0\x01\x12\x03r\t\x14\n\r\n\x06\x04\x04\x04\0\x02\
    \0\x12\x03s\x08\x12\n\x0e\n\x07\x04\x04\x04\0\x02\0\x01\x12\x03s\x08\r\n\
    \x0e\n\x07\x04\x04\x04\0\x02\0\x02\x12\x03s\x10\x11\n\r\n\x06\x04\x04\
    \x04\0\x02\x01\x12\x03t\x08\x15\n\x0e\n\x07\x04\x04\x04\0\x02\x01\x01\
    \x12\x03t\x08\x10\n\x0e\n\x07\x04\x04\x04\0\x02\x01\x02\x12\x03t\x13\x14\
    \n\r\n\x06\x04\x04\x04\0\x02\x02\x12\x03u\x08\x17\n\x0e\n\x07\x04\x04\
    \x04\0\x02\x02\x01\x12\x03u\x08\x12\n\x0e\n\x07\x04\x04\x04\0\x02\x02\
    \x02\x12\x03u\x15\x16\n\r\n\x06\x04\x04\x04\0\x02\x03\x12\x03v\x08\x1b\n\
    \x0e\n\x07\x04\x04\x04\0\x02\x03\x01\x12\x03v\x08\x16\n\x0e\n\x07\x04\
    \x04\x04\0\x02\x03\x02\x12\x03v\x19\x1a\n\r\n\x06\x04\x04\x04\0\x02\x04\
    \x12\x03w\x08\x11\n\x0e\n\x07\x04\x04\x04\0\x02\x04\x01\x12\x03w\x08\x0c\
    \n\x0e\n\x07\x04\x04\x04\0\x02\x04\x02\x12\x03w\x0f\x10\n\r\n\x06\x04\
    \x04\x04\0\x02\x05\x12\x03x\x08\x15\n\x0e\n\x07\x04\x04\x04\0\x02\x05\
    \x01\x12\x03x\x08\x10\n\x0e\n\x07\x04\x04\x04\0\x02\x05\x02\x12\x03x\x13\
    \x14\n\r\n\x06\x04\x04\x04\0\x02\x06\x12\x03y\x08\x14\n\x0e\n\x07\x04\
    \x04\x04\0\x02\x06\x01\x12\x03y\x08\x0f\n\x0e\n\x07\x04\x04\x04\0\x02\
    \x06\x02\x12\x03y\x12\x13\n\r\n\x06\x04\x04\x04\0\x02\x07\x12\x03z\x08\
    \x12\n\x0e\n\x07\x04\x04\x04\0\x02\x07\x01\x12\x03z\x08\r\n\x0e\n\x07\
    \x04\x04\x04\0\x02\x07\x02\x12\x03z\x10\x11\n\r\n\x06\x04\x04\x04\0\x02\
    \x08\x12\x03{\x08\x13\n\x0e\n\x07\x04\x04\x04\0\x02\x08\x01\x12\x03{\x08\
    \x0e\n\x0e\n\x07\x04\x04\x04\0\x02\x08\x02\x12\x03{\x11\x12\n\r\n\x04\
    \x04\x04\x03\0\x12\x05~\x04\x88\x01\x05\n\x0c\n\x05\x04\x04\x03\0\x01\
    \x12\x03~\x0c\x13\n\x0e\n\x06\x04\x04\x03\0\x02\0\x12\x04\x80\x01\x08\
    \x19\n\x10\n\x07\x04\x04\x03\0\x02\0\x04\x12\x05\x80\x01\x08~\x15\n\x0f\
    \n\x07\x04\x04\x03\0\x02\0\x05\x12\x04\x80\x01\x08\x0e\n\x0f\n\x07\x04\
    \x04\x03\0\x02\0\x01\x12\x04\x80\x01\x0f\x14\n\x0f\n\x07\x04\x04\x03\0\
    \x02\0\x03\x12\x04\x80\x01\x17\x18\n\x1d\n\x06\x04\x04\x03\0\x02\x01\x12\
    \x04\x83\x01\x08\x19\x1a\r\x20byte\x20offset\n\n\x11\n\x07\x04\x04\x03\0\
    \x02\x01\x04\x12\x06\x83\x01\x08\x80\x01\x19\n\x0f\n\x07\x04\x04\x03\0\
    \x02\x01\x05\x12\x04\x83\x01\x08\x0e\n\x0f\n\x07\x04\x04\x03\0\x02\x01\
    \x01\x12\x04\x83\x01\x0f\x14\n\x0f\n\x07\x04\x04\x03\0\x02\x01\x03\x12\
    \x04\x83\x01\x17\x18\n\xc8\x01\n\x06\x04\x04\x03\0\x02\x02\x12\x04\x87\
    \x01\x08\x1a\x1a\xb7\x01\x20length\x20in\x20power\x20of\x202,\x20unless\
    \x20it\x20gets\x20truncated\x20by\x20the\x20end\x20of\x20the\x20file\n\
    \x20All\x20current\x20implementations\x20use\x202^14\x20(16\x20kiB)\x20a\
    nd\x20close\x20connections\x20which\x20request\x20an\x20amount\x20greate\
    r\x20than\x20that.\n\n\x11\n\x07\x04\x04\x03\0\x02\x02\x04\x12\x06\x87\
    \x01\x08\x83\x01\x19\n\x0f\n\x07\x04\x04\x03\0\x02\x02\x05\x12\x04\x87\
    \x01\x08\x0e\n\x0f\n\x07\x04\x04\x03\0\x02\x02\x01\x12\x04\x87\x01\x0f\
    \x15\n\x0f\n\x07\x04\x04\x03\0\x02\x02\x03\x12\x04\x87\x01\x18\x19\n\x0e\
    \n\x04\x04\x04\x03\x01\x12\x06\x8a\x01\x04\x92\x01\x05\n\r\n\x05\x04\x04\
    \x03\x01\x01\x12\x04\x8a\x01\x0c\x11\n\x0e\n\x06\x04\x04\x03\x01\x02\0\
    \x12\x04\x8c\x01\x08\x19\n\x11\n\x07\x04\x04\x03\x01\x02\0\x04\x12\x06\
    \x8c\x01\x08\x8a\x01\x13\n\x0f\n\x07\x04\x04\x03\x01\x02\0\x05\x12\x04\
    \x8c\x01\x08\x0e\n\x0f\n\x07\x04\x04\x03\x01\x02\0\x01\x12\x04\x8c\x01\
    \x0f\x14\n\x0f\n\x07\x04\x04\x03\x01\x02\0\x03\x12\x04\x8c\x01\x17\x18\n\
    \x1d\n\x06\x04\x04\x03\x01\x02\x01\x12\x04\x8f\x01\x08\x19\x1a\r\x20byte\
    \x20offset\n\n\x11\n\x07\x04\x04\x03\x01\x02\x01\x04\x12\x06\x8f\x01\x08\
    \x8c\x01\x19\n\x0f\n\x07\x04\x04\x03\x01\x02\x01\x05\x12\x04\x8f\x01\x08\
    \x0e\n\x0f\n\x07\x04\x04\x03\x01\x02\x01\x01\x12\x04\x8f\x01\x0f\x14\n\
    \x0f\n\x07\x04\x04\x03\x01\x02\x01\x03\x12\x04\x8f\x01\x17\x18\n\x0e\n\
    \x06\x04\x04\x03\x01\x02\x02\x12\x04\x91\x01\x08\x18\n\x11\n\x07\x04\x04\
    \x03\x01\x02\x02\x04\x12\x06\x91\x01\x08\x8f\x01\x19\n\x0f\n\x07\x04\x04\
    \x03\x01\x02\x02\x05\x12\x04\x91\x01\x08\r\n\x0f\n\x07\x04\x04\x03\x01\
    \x02\x02\x01\x12\x04\x91\x01\x0e\x13\n\x0f\n\x07\x04\x04\x03\x01\x02\x02\
    \x03\x12\x04\x91\x01\x16\x17\n3\n\x04\x04\x04\x02\0\x12\x04\x95\x01\x04\
    \x19\x1a%\x20defines\x20what\x20type\x20of\x20message\x20it\x20is.\n\n\
    \x0f\n\x05\x04\x04\x02\0\x04\x12\x06\x95\x01\x04\x92\x01\x05\n\r\n\x05\
    \x04\x04\x02\0\x06\x12\x04\x95\x01\x04\x0f\n\r\n\x05\x04\x04\x02\0\x01\
    \x12\x04\x95\x01\x10\x14\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x95\x01\x17\
    \x18\n\x89\x03\n\x04\x04\x04\x02\x01\x12\x04\x9d\x01\x04\x1a\x1a\xfa\x02\
    \x20only\x20ever\x20sent\x20as\x20the\x20first\x20message\n\x20a\x20bitf\
    ield\x20with\x20each\x20index\x20that\x20downloader\x20has\x20sent\x20se\
    t\x20to\x20one\x20and\x20the\x20rest\x20set\x20to\x20zero.\n\x20Download\
    ers\x20which\x20don't\x20have\x20anything\x20yet\x20may\x20skip\x20the\
    \x20'bitfield'\x20message.\n\x20The\x20first\x20byte\x20of\x20the\x20bit\
    field\x20corresponds\x20to\x20indices\x200\x20-\x207\x20from\x20high\x20\
    bit\x20to\x20low\x20bit,\x20respectively.\n\x20The\x20next\x20one\x208-1\
    5,\x20etc.\x20Spare\x20bits\x20at\x20the\x20end\x20are\x20set\x20to\x20z\
    ero.\n\x20BITFIELD\n\n\x0f\n\x05\x04\x04\x02\x01\x04\x12\x06\x9d\x01\x04\
    \x95\x01\x19\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\x9d\x01\x04\t\n\r\n\
    \x05\x04\x04\x02\x01\x01\x12\x04\x9d\x01\n\x15\n\r\n\x05\x04\x04\x02\x01\
    \x03\x12\x04\x9d\x01\x18\x19\n]\n\x04\x04\x04\x02\x02\x12\x04\xa1\x01\
    \x04\x1a\x1aO\x20the\x20index\x20which\x20that\x20downloader\x20just\x20\
    completed\x20and\x20checked\x20the\x20hash\x20of.\n\x20HAVE\n\n\x0f\n\
    \x05\x04\x04\x02\x02\x04\x12\x06\xa1\x01\x04\x9d\x01\x1a\n\r\n\x05\x04\
    \x04\x02\x02\x05\x12\x04\xa1\x01\x04\n\n\r\n\x05\x04\x04\x02\x02\x01\x12\
    \x04\xa1\x01\x0b\x15\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xa1\x01\x18\
    \x19\n\x1f\n\x04\x04\x04\x02\x03\x12\x04\xa4\x01\x04\x18\x1a\x11\x20REQU\
    EST,\x20CANCEL\n\n\x0f\n\x05\x04\x04\x02\x03\x04\x12\x06\xa4\x01\x04\xa1\
    \x01\x1a\n\r\n\x05\x04\x04\x02\x03\x06\x12\x04\xa4\x01\x04\x0b\n\r\n\x05\
    \x04\x04\x02\x03\x01\x12\x04\xa4\x01\x0c\x13\n\r\n\x05\x04\x04\x02\x03\
    \x03\x12\x04\xa4\x01\x16\x17\n\x15\n\x04\x04\x04\x02\x04\x12\x04\xa7\x01\
    \x04\x14\x1a\x07\x20PIECE\n\n\x0f\n\x05\x04\x04\x02\x04\x04\x12\x06\xa7\
    \x01\x04\xa4\x01\x18\n\r\n\x05\x04\x04\x02\x04\x06\x12\x04\xa7\x01\x04\t\
    \n\r\n\x05\x04\x04\x02\x04\x01\x12\x04\xa7\x01\n\x0f\n\r\n\x05\x04\x04\
    \x02\x04\x03\x12\x04\xa7\x01\x12\x13b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
