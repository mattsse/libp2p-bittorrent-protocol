// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct MetaInfo {
    // message fields
    pub annouce: ::std::string::String,
    pub name: ::std::string::String,
    pub piece_length: u32,
    pub pieces: ::std::string::String,
    pub length: u32,
    pub files: ::protobuf::RepeatedField<MetaInfo_FileInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetaInfo {
    fn default() -> &'a MetaInfo {
        <MetaInfo as ::protobuf::Message>::default_instance()
    }
}

impl MetaInfo {
    pub fn new() -> MetaInfo {
        ::std::default::Default::default()
    }

    // string annouce = 1;


    pub fn get_annouce(&self) -> &str {
        &self.annouce
    }
    pub fn clear_annouce(&mut self) {
        self.annouce.clear();
    }

    // Param is passed by value, moved
    pub fn set_annouce(&mut self, v: ::std::string::String) {
        self.annouce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_annouce(&mut self) -> &mut ::std::string::String {
        &mut self.annouce
    }

    // Take field
    pub fn take_annouce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.annouce, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint32 piece_length = 3;


    pub fn get_piece_length(&self) -> u32 {
        self.piece_length
    }
    pub fn clear_piece_length(&mut self) {
        self.piece_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_piece_length(&mut self, v: u32) {
        self.piece_length = v;
    }

    // string pieces = 4;


    pub fn get_pieces(&self) -> &str {
        &self.pieces
    }
    pub fn clear_pieces(&mut self) {
        self.pieces.clear();
    }

    // Param is passed by value, moved
    pub fn set_pieces(&mut self, v: ::std::string::String) {
        self.pieces = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pieces(&mut self) -> &mut ::std::string::String {
        &mut self.pieces
    }

    // Take field
    pub fn take_pieces(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pieces, ::std::string::String::new())
    }

    // uint32 length = 5;


    pub fn get_length(&self) -> u32 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = v;
    }

    // repeated .structs.pb.MetaInfo.FileInfo files = 6;


    pub fn get_files(&self) -> &[MetaInfo_FileInfo] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<MetaInfo_FileInfo>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<MetaInfo_FileInfo> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<MetaInfo_FileInfo> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MetaInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.annouce)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.piece_length = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pieces)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.annouce.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.annouce);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.piece_length != 0 {
            my_size += ::protobuf::rt::value_size(3, self.piece_length, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pieces.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.pieces);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(5, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.annouce.is_empty() {
            os.write_string(1, &self.annouce)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.piece_length != 0 {
            os.write_uint32(3, self.piece_length)?;
        }
        if !self.pieces.is_empty() {
            os.write_string(4, &self.pieces)?;
        }
        if self.length != 0 {
            os.write_uint32(5, self.length)?;
        }
        for v in &self.files {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetaInfo {
        MetaInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "annouce",
                    |m: &MetaInfo| { &m.annouce },
                    |m: &mut MetaInfo| { &mut m.annouce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &MetaInfo| { &m.name },
                    |m: &mut MetaInfo| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "piece_length",
                    |m: &MetaInfo| { &m.piece_length },
                    |m: &mut MetaInfo| { &mut m.piece_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pieces",
                    |m: &MetaInfo| { &m.pieces },
                    |m: &mut MetaInfo| { &mut m.pieces },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "length",
                    |m: &MetaInfo| { &m.length },
                    |m: &mut MetaInfo| { &mut m.length },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MetaInfo_FileInfo>>(
                    "files",
                    |m: &MetaInfo| { &m.files },
                    |m: &mut MetaInfo| { &mut m.files },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetaInfo>(
                    "MetaInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetaInfo {
        static mut instance: ::protobuf::lazy::Lazy<MetaInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetaInfo,
        };
        unsafe {
            instance.get(MetaInfo::new)
        }
    }
}

impl ::protobuf::Clear for MetaInfo {
    fn clear(&mut self) {
        self.annouce.clear();
        self.name.clear();
        self.piece_length = 0;
        self.pieces.clear();
        self.length = 0;
        self.files.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetaInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetaInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetaInfo_FileInfo {
    // message fields
    pub length: u32,
    pub paths: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetaInfo_FileInfo {
    fn default() -> &'a MetaInfo_FileInfo {
        <MetaInfo_FileInfo as ::protobuf::Message>::default_instance()
    }
}

impl MetaInfo_FileInfo {
    pub fn new() -> MetaInfo_FileInfo {
        ::std::default::Default::default()
    }

    // uint32 length = 1;


    pub fn get_length(&self) -> u32 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = v;
    }

    // repeated string paths = 2;


    pub fn get_paths(&self) -> &[::std::string::String] {
        &self.paths
    }
    pub fn clear_paths(&mut self) {
        self.paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_paths(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_paths(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.paths
    }

    // Take field
    pub fn take_paths(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.paths, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MetaInfo_FileInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(1, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.length != 0 {
            os.write_uint32(1, self.length)?;
        }
        for v in &self.paths {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetaInfo_FileInfo {
        MetaInfo_FileInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "length",
                    |m: &MetaInfo_FileInfo| { &m.length },
                    |m: &mut MetaInfo_FileInfo| { &mut m.length },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "paths",
                    |m: &MetaInfo_FileInfo| { &m.paths },
                    |m: &mut MetaInfo_FileInfo| { &mut m.paths },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetaInfo_FileInfo>(
                    "MetaInfo_FileInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetaInfo_FileInfo {
        static mut instance: ::protobuf::lazy::Lazy<MetaInfo_FileInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetaInfo_FileInfo,
        };
        unsafe {
            instance.get(MetaInfo_FileInfo::new)
        }
    }
}

impl ::protobuf::Clear for MetaInfo_FileInfo {
    fn clear(&mut self) {
        self.length = 0;
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetaInfo_FileInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetaInfo_FileInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Peer {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub ip: ::std::vec::Vec<u8>,
    pub port: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Peer {
    fn default() -> &'a Peer {
        <Peer as ::protobuf::Message>::default_instance()
    }
}

impl Peer {
    pub fn new() -> Peer {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // bytes ip = 2;


    pub fn get_ip(&self) -> &[u8] {
        &self.ip
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::vec::Vec<u8>) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ip, ::std::vec::Vec::new())
    }

    // uint32 port = 3;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }
}

impl ::protobuf::Message for Peer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ip)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.ip);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if !self.ip.is_empty() {
            os.write_bytes(2, &self.ip)?;
        }
        if self.port != 0 {
            os.write_uint32(3, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Peer {
        Peer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &Peer| { &m.id },
                    |m: &mut Peer| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "ip",
                    |m: &Peer| { &m.ip },
                    |m: &mut Peer| { &mut m.ip },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "port",
                    |m: &Peer| { &m.port },
                    |m: &mut Peer| { &mut m.port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Peer>(
                    "Peer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Peer {
        static mut instance: ::protobuf::lazy::Lazy<Peer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Peer,
        };
        unsafe {
            instance.get(Peer::new)
        }
    }
}

impl ::protobuf::Clear for Peer {
    fn clear(&mut self) {
        self.id.clear();
        self.ip.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Peer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Peer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackerRequest {
    // message fields
    pub infoHash: ::std::vec::Vec<u8>,
    pub peer: ::protobuf::SingularPtrField<Peer>,
    pub uploaded: ::std::vec::Vec<u8>,
    pub downloaded: ::std::vec::Vec<u8>,
    pub left: ::std::vec::Vec<u8>,
    pub event: TrackerRequest_EventType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackerRequest {
    fn default() -> &'a TrackerRequest {
        <TrackerRequest as ::protobuf::Message>::default_instance()
    }
}

impl TrackerRequest {
    pub fn new() -> TrackerRequest {
        ::std::default::Default::default()
    }

    // bytes infoHash = 1;


    pub fn get_infoHash(&self) -> &[u8] {
        &self.infoHash
    }
    pub fn clear_infoHash(&mut self) {
        self.infoHash.clear();
    }

    // Param is passed by value, moved
    pub fn set_infoHash(&mut self, v: ::std::vec::Vec<u8>) {
        self.infoHash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_infoHash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.infoHash
    }

    // Take field
    pub fn take_infoHash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.infoHash, ::std::vec::Vec::new())
    }

    // .structs.pb.Peer peer = 2;


    pub fn get_peer(&self) -> &Peer {
        self.peer.as_ref().unwrap_or_else(|| Peer::default_instance())
    }
    pub fn clear_peer(&mut self) {
        self.peer.clear();
    }

    pub fn has_peer(&self) -> bool {
        self.peer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer(&mut self, v: Peer) {
        self.peer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer(&mut self) -> &mut Peer {
        if self.peer.is_none() {
            self.peer.set_default();
        }
        self.peer.as_mut().unwrap()
    }

    // Take field
    pub fn take_peer(&mut self) -> Peer {
        self.peer.take().unwrap_or_else(|| Peer::new())
    }

    // bytes uploaded = 3;


    pub fn get_uploaded(&self) -> &[u8] {
        &self.uploaded
    }
    pub fn clear_uploaded(&mut self) {
        self.uploaded.clear();
    }

    // Param is passed by value, moved
    pub fn set_uploaded(&mut self, v: ::std::vec::Vec<u8>) {
        self.uploaded = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uploaded(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.uploaded
    }

    // Take field
    pub fn take_uploaded(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.uploaded, ::std::vec::Vec::new())
    }

    // bytes downloaded = 4;


    pub fn get_downloaded(&self) -> &[u8] {
        &self.downloaded
    }
    pub fn clear_downloaded(&mut self) {
        self.downloaded.clear();
    }

    // Param is passed by value, moved
    pub fn set_downloaded(&mut self, v: ::std::vec::Vec<u8>) {
        self.downloaded = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_downloaded(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.downloaded
    }

    // Take field
    pub fn take_downloaded(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.downloaded, ::std::vec::Vec::new())
    }

    // bytes left = 5;


    pub fn get_left(&self) -> &[u8] {
        &self.left
    }
    pub fn clear_left(&mut self) {
        self.left.clear();
    }

    // Param is passed by value, moved
    pub fn set_left(&mut self, v: ::std::vec::Vec<u8>) {
        self.left = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_left(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.left
    }

    // Take field
    pub fn take_left(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.left, ::std::vec::Vec::new())
    }

    // .structs.pb.TrackerRequest.EventType event = 6;


    pub fn get_event(&self) -> TrackerRequest_EventType {
        self.event
    }
    pub fn clear_event(&mut self) {
        self.event = TrackerRequest_EventType::EMPTY;
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: TrackerRequest_EventType) {
        self.event = v;
    }
}

impl ::protobuf::Message for TrackerRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.peer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.infoHash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.peer)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.uploaded)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.downloaded)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.left)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event, 6, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.infoHash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.infoHash);
        }
        if let Some(ref v) = self.peer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.uploaded.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.uploaded);
        }
        if !self.downloaded.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.downloaded);
        }
        if !self.left.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.left);
        }
        if self.event != TrackerRequest_EventType::EMPTY {
            my_size += ::protobuf::rt::enum_size(6, self.event);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.infoHash.is_empty() {
            os.write_bytes(1, &self.infoHash)?;
        }
        if let Some(ref v) = self.peer.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.uploaded.is_empty() {
            os.write_bytes(3, &self.uploaded)?;
        }
        if !self.downloaded.is_empty() {
            os.write_bytes(4, &self.downloaded)?;
        }
        if !self.left.is_empty() {
            os.write_bytes(5, &self.left)?;
        }
        if self.event != TrackerRequest_EventType::EMPTY {
            os.write_enum(6, self.event.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackerRequest {
        TrackerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "infoHash",
                    |m: &TrackerRequest| { &m.infoHash },
                    |m: &mut TrackerRequest| { &mut m.infoHash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Peer>>(
                    "peer",
                    |m: &TrackerRequest| { &m.peer },
                    |m: &mut TrackerRequest| { &mut m.peer },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "uploaded",
                    |m: &TrackerRequest| { &m.uploaded },
                    |m: &mut TrackerRequest| { &mut m.uploaded },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "downloaded",
                    |m: &TrackerRequest| { &m.downloaded },
                    |m: &mut TrackerRequest| { &mut m.downloaded },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "left",
                    |m: &TrackerRequest| { &m.left },
                    |m: &mut TrackerRequest| { &mut m.left },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TrackerRequest_EventType>>(
                    "event",
                    |m: &TrackerRequest| { &m.event },
                    |m: &mut TrackerRequest| { &mut m.event },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TrackerRequest>(
                    "TrackerRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TrackerRequest {
        static mut instance: ::protobuf::lazy::Lazy<TrackerRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TrackerRequest,
        };
        unsafe {
            instance.get(TrackerRequest::new)
        }
    }
}

impl ::protobuf::Clear for TrackerRequest {
    fn clear(&mut self) {
        self.infoHash.clear();
        self.peer.clear();
        self.uploaded.clear();
        self.downloaded.clear();
        self.left.clear();
        self.event = TrackerRequest_EventType::EMPTY;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TrackerRequest_EventType {
    EMPTY = 0,
    STARTED = 1,
    COMPLETED = 2,
    STOPPED = 3,
}

impl ::protobuf::ProtobufEnum for TrackerRequest_EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TrackerRequest_EventType> {
        match value {
            0 => ::std::option::Option::Some(TrackerRequest_EventType::EMPTY),
            1 => ::std::option::Option::Some(TrackerRequest_EventType::STARTED),
            2 => ::std::option::Option::Some(TrackerRequest_EventType::COMPLETED),
            3 => ::std::option::Option::Some(TrackerRequest_EventType::STOPPED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TrackerRequest_EventType] = &[
            TrackerRequest_EventType::EMPTY,
            TrackerRequest_EventType::STARTED,
            TrackerRequest_EventType::COMPLETED,
            TrackerRequest_EventType::STOPPED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TrackerRequest_EventType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TrackerRequest_EventType {
}

impl ::std::default::Default for TrackerRequest_EventType {
    fn default() -> Self {
        TrackerRequest_EventType::EMPTY
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackerRequest_EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackerResponse {
    // message fields
    pub failure_reason: ::std::string::String,
    pub interval: u32,
    pub peers: ::protobuf::RepeatedField<Peer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackerResponse {
    fn default() -> &'a TrackerResponse {
        <TrackerResponse as ::protobuf::Message>::default_instance()
    }
}

impl TrackerResponse {
    pub fn new() -> TrackerResponse {
        ::std::default::Default::default()
    }

    // string failure_reason = 1;


    pub fn get_failure_reason(&self) -> &str {
        &self.failure_reason
    }
    pub fn clear_failure_reason(&mut self) {
        self.failure_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_failure_reason(&mut self, v: ::std::string::String) {
        self.failure_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_failure_reason(&mut self) -> &mut ::std::string::String {
        &mut self.failure_reason
    }

    // Take field
    pub fn take_failure_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.failure_reason, ::std::string::String::new())
    }

    // uint32 interval = 2;


    pub fn get_interval(&self) -> u32 {
        self.interval
    }
    pub fn clear_interval(&mut self) {
        self.interval = 0;
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: u32) {
        self.interval = v;
    }

    // repeated .structs.pb.Peer peers = 3;


    pub fn get_peers(&self) -> &[Peer] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<Peer>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<Peer> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<Peer> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TrackerResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.failure_reason)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.interval = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.failure_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.failure_reason);
        }
        if self.interval != 0 {
            my_size += ::protobuf::rt::value_size(2, self.interval, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.failure_reason.is_empty() {
            os.write_string(1, &self.failure_reason)?;
        }
        if self.interval != 0 {
            os.write_uint32(2, self.interval)?;
        }
        for v in &self.peers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackerResponse {
        TrackerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "failure_reason",
                    |m: &TrackerResponse| { &m.failure_reason },
                    |m: &mut TrackerResponse| { &mut m.failure_reason },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "interval",
                    |m: &TrackerResponse| { &m.interval },
                    |m: &mut TrackerResponse| { &mut m.interval },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Peer>>(
                    "peers",
                    |m: &TrackerResponse| { &m.peers },
                    |m: &mut TrackerResponse| { &mut m.peers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TrackerResponse>(
                    "TrackerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TrackerResponse {
        static mut instance: ::protobuf::lazy::Lazy<TrackerResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TrackerResponse,
        };
        unsafe {
            instance.get(TrackerResponse::new)
        }
    }
}

impl ::protobuf::Clear for TrackerResponse {
    fn clear(&mut self) {
        self.failure_reason.clear();
        self.interval = 0;
        self.peers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerMessage {
    // message fields
    pub field_type: PeerMessage_MessageType,
    pub payload: ::std::vec::Vec<u8>,
    pub have_index: u32,
    pub request: ::protobuf::SingularPtrField<PeerMessage_Request>,
    pub piece: ::protobuf::SingularPtrField<PeerMessage_Piece>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerMessage {
    fn default() -> &'a PeerMessage {
        <PeerMessage as ::protobuf::Message>::default_instance()
    }
}

impl PeerMessage {
    pub fn new() -> PeerMessage {
        ::std::default::Default::default()
    }

    // .structs.pb.PeerMessage.MessageType type = 1;


    pub fn get_field_type(&self) -> PeerMessage_MessageType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = PeerMessage_MessageType::CHOKE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: PeerMessage_MessageType) {
        self.field_type = v;
    }

    // bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // uint32 have_index = 4;


    pub fn get_have_index(&self) -> u32 {
        self.have_index
    }
    pub fn clear_have_index(&mut self) {
        self.have_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_have_index(&mut self, v: u32) {
        self.have_index = v;
    }

    // .structs.pb.PeerMessage.Request request = 5;


    pub fn get_request(&self) -> &PeerMessage_Request {
        self.request.as_ref().unwrap_or_else(|| PeerMessage_Request::default_instance())
    }
    pub fn clear_request(&mut self) {
        self.request.clear();
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: PeerMessage_Request) {
        self.request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut PeerMessage_Request {
        if self.request.is_none() {
            self.request.set_default();
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> PeerMessage_Request {
        self.request.take().unwrap_or_else(|| PeerMessage_Request::new())
    }

    // .structs.pb.PeerMessage.Piece piece = 6;


    pub fn get_piece(&self) -> &PeerMessage_Piece {
        self.piece.as_ref().unwrap_or_else(|| PeerMessage_Piece::default_instance())
    }
    pub fn clear_piece(&mut self) {
        self.piece.clear();
    }

    pub fn has_piece(&self) -> bool {
        self.piece.is_some()
    }

    // Param is passed by value, moved
    pub fn set_piece(&mut self, v: PeerMessage_Piece) {
        self.piece = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_piece(&mut self) -> &mut PeerMessage_Piece {
        if self.piece.is_none() {
            self.piece.set_default();
        }
        self.piece.as_mut().unwrap()
    }

    // Take field
    pub fn take_piece(&mut self) -> PeerMessage_Piece {
        self.piece.take().unwrap_or_else(|| PeerMessage_Piece::new())
    }
}

impl ::protobuf::Message for PeerMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.piece {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.have_index = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.piece)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != PeerMessage_MessageType::CHOKE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        if self.have_index != 0 {
            my_size += ::protobuf::rt::value_size(4, self.have_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.piece.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != PeerMessage_MessageType::CHOKE {
            os.write_enum(1, self.field_type.value())?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        if self.have_index != 0 {
            os.write_uint32(4, self.have_index)?;
        }
        if let Some(ref v) = self.request.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.piece.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerMessage {
        PeerMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PeerMessage_MessageType>>(
                    "type",
                    |m: &PeerMessage| { &m.field_type },
                    |m: &mut PeerMessage| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &PeerMessage| { &m.payload },
                    |m: &mut PeerMessage| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "have_index",
                    |m: &PeerMessage| { &m.have_index },
                    |m: &mut PeerMessage| { &mut m.have_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PeerMessage_Request>>(
                    "request",
                    |m: &PeerMessage| { &m.request },
                    |m: &mut PeerMessage| { &mut m.request },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PeerMessage_Piece>>(
                    "piece",
                    |m: &PeerMessage| { &m.piece },
                    |m: &mut PeerMessage| { &mut m.piece },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerMessage>(
                    "PeerMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerMessage {
        static mut instance: ::protobuf::lazy::Lazy<PeerMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerMessage,
        };
        unsafe {
            instance.get(PeerMessage::new)
        }
    }
}

impl ::protobuf::Clear for PeerMessage {
    fn clear(&mut self) {
        self.field_type = PeerMessage_MessageType::CHOKE;
        self.payload.clear();
        self.have_index = 0;
        self.request.clear();
        self.piece.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerMessage_Request {
    // message fields
    pub index: u32,
    pub begin: u32,
    pub length: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerMessage_Request {
    fn default() -> &'a PeerMessage_Request {
        <PeerMessage_Request as ::protobuf::Message>::default_instance()
    }
}

impl PeerMessage_Request {
    pub fn new() -> PeerMessage_Request {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // uint32 begin = 2;


    pub fn get_begin(&self) -> u32 {
        self.begin
    }
    pub fn clear_begin(&mut self) {
        self.begin = 0;
    }

    // Param is passed by value, moved
    pub fn set_begin(&mut self, v: u32) {
        self.begin = v;
    }

    // uint32 length = 3;


    pub fn get_length(&self) -> u32 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = v;
    }
}

impl ::protobuf::Message for PeerMessage_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.begin = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.begin != 0 {
            my_size += ::protobuf::rt::value_size(2, self.begin, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(3, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if self.begin != 0 {
            os.write_uint32(2, self.begin)?;
        }
        if self.length != 0 {
            os.write_uint32(3, self.length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerMessage_Request {
        PeerMessage_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &PeerMessage_Request| { &m.index },
                    |m: &mut PeerMessage_Request| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "begin",
                    |m: &PeerMessage_Request| { &m.begin },
                    |m: &mut PeerMessage_Request| { &mut m.begin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "length",
                    |m: &PeerMessage_Request| { &m.length },
                    |m: &mut PeerMessage_Request| { &mut m.length },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerMessage_Request>(
                    "PeerMessage_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerMessage_Request {
        static mut instance: ::protobuf::lazy::Lazy<PeerMessage_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerMessage_Request,
        };
        unsafe {
            instance.get(PeerMessage_Request::new)
        }
    }
}

impl ::protobuf::Clear for PeerMessage_Request {
    fn clear(&mut self) {
        self.index = 0;
        self.begin = 0;
        self.length = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerMessage_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerMessage_Piece {
    // message fields
    pub index: u32,
    pub begin: u32,
    pub piece: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerMessage_Piece {
    fn default() -> &'a PeerMessage_Piece {
        <PeerMessage_Piece as ::protobuf::Message>::default_instance()
    }
}

impl PeerMessage_Piece {
    pub fn new() -> PeerMessage_Piece {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // uint32 begin = 2;


    pub fn get_begin(&self) -> u32 {
        self.begin
    }
    pub fn clear_begin(&mut self) {
        self.begin = 0;
    }

    // Param is passed by value, moved
    pub fn set_begin(&mut self, v: u32) {
        self.begin = v;
    }

    // bytes piece = 3;


    pub fn get_piece(&self) -> &[u8] {
        &self.piece
    }
    pub fn clear_piece(&mut self) {
        self.piece.clear();
    }

    // Param is passed by value, moved
    pub fn set_piece(&mut self, v: ::std::vec::Vec<u8>) {
        self.piece = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_piece(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.piece
    }

    // Take field
    pub fn take_piece(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.piece, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PeerMessage_Piece {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.begin = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.piece)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.begin != 0 {
            my_size += ::protobuf::rt::value_size(2, self.begin, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.piece.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.piece);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if self.begin != 0 {
            os.write_uint32(2, self.begin)?;
        }
        if !self.piece.is_empty() {
            os.write_bytes(3, &self.piece)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerMessage_Piece {
        PeerMessage_Piece::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &PeerMessage_Piece| { &m.index },
                    |m: &mut PeerMessage_Piece| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "begin",
                    |m: &PeerMessage_Piece| { &m.begin },
                    |m: &mut PeerMessage_Piece| { &mut m.begin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "piece",
                    |m: &PeerMessage_Piece| { &m.piece },
                    |m: &mut PeerMessage_Piece| { &mut m.piece },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerMessage_Piece>(
                    "PeerMessage_Piece",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerMessage_Piece {
        static mut instance: ::protobuf::lazy::Lazy<PeerMessage_Piece> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerMessage_Piece,
        };
        unsafe {
            instance.get(PeerMessage_Piece::new)
        }
    }
}

impl ::protobuf::Clear for PeerMessage_Piece {
    fn clear(&mut self) {
        self.index = 0;
        self.begin = 0;
        self.piece.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerMessage_Piece {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage_Piece {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PeerMessage_MessageType {
    CHOKE = 0,
    UN_CHOKE = 1,
    INTERESTED = 2,
    NOT_INTERESTED = 3,
    HAVE = 4,
    BITFIELD = 5,
    REQUEST = 6,
    PIECE = 7,
    CANCEL = 8,
}

impl ::protobuf::ProtobufEnum for PeerMessage_MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PeerMessage_MessageType> {
        match value {
            0 => ::std::option::Option::Some(PeerMessage_MessageType::CHOKE),
            1 => ::std::option::Option::Some(PeerMessage_MessageType::UN_CHOKE),
            2 => ::std::option::Option::Some(PeerMessage_MessageType::INTERESTED),
            3 => ::std::option::Option::Some(PeerMessage_MessageType::NOT_INTERESTED),
            4 => ::std::option::Option::Some(PeerMessage_MessageType::HAVE),
            5 => ::std::option::Option::Some(PeerMessage_MessageType::BITFIELD),
            6 => ::std::option::Option::Some(PeerMessage_MessageType::REQUEST),
            7 => ::std::option::Option::Some(PeerMessage_MessageType::PIECE),
            8 => ::std::option::Option::Some(PeerMessage_MessageType::CANCEL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PeerMessage_MessageType] = &[
            PeerMessage_MessageType::CHOKE,
            PeerMessage_MessageType::UN_CHOKE,
            PeerMessage_MessageType::INTERESTED,
            PeerMessage_MessageType::NOT_INTERESTED,
            PeerMessage_MessageType::HAVE,
            PeerMessage_MessageType::BITFIELD,
            PeerMessage_MessageType::REQUEST,
            PeerMessage_MessageType::PIECE,
            PeerMessage_MessageType::CANCEL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("PeerMessage_MessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for PeerMessage_MessageType {
}

impl ::std::default::Default for PeerMessage_MessageType {
    fn default() -> Self {
        PeerMessage_MessageType::CHOKE
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage_MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tbtt.proto\x12\nstructs.pb\"\xfa\x01\n\x08MetaInfo\x12\x18\n\x07annou\
    ce\x18\x01\x20\x01(\tR\x07annouce\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x12!\n\x0cpiece_length\x18\x03\x20\x01(\rR\x0bpieceLength\x12\
    \x16\n\x06pieces\x18\x04\x20\x01(\tR\x06pieces\x12\x16\n\x06length\x18\
    \x05\x20\x01(\rR\x06length\x123\n\x05files\x18\x06\x20\x03(\x0b2\x1d.str\
    ucts.pb.MetaInfo.FileInfoR\x05files\x1a8\n\x08FileInfo\x12\x16\n\x06leng\
    th\x18\x01\x20\x01(\rR\x06length\x12\x14\n\x05paths\x18\x02\x20\x03(\tR\
    \x05paths\":\n\x04Peer\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\x12\
    \x0e\n\x02ip\x18\x02\x20\x01(\x0cR\x02ip\x12\x12\n\x04port\x18\x03\x20\
    \x01(\rR\x04port\"\x9f\x02\n\x0eTrackerRequest\x12\x1a\n\x08infoHash\x18\
    \x01\x20\x01(\x0cR\x08infoHash\x12$\n\x04peer\x18\x02\x20\x01(\x0b2\x10.\
    structs.pb.PeerR\x04peer\x12\x1a\n\x08uploaded\x18\x03\x20\x01(\x0cR\x08\
    uploaded\x12\x1e\n\ndownloaded\x18\x04\x20\x01(\x0cR\ndownloaded\x12\x12\
    \n\x04left\x18\x05\x20\x01(\x0cR\x04left\x12:\n\x05event\x18\x06\x20\x01\
    (\x0e2$.structs.pb.TrackerRequest.EventTypeR\x05event\"?\n\tEventType\
    \x12\t\n\x05EMPTY\x10\0\x12\x0b\n\x07STARTED\x10\x01\x12\r\n\tCOMPLETED\
    \x10\x02\x12\x0b\n\x07STOPPED\x10\x03\"|\n\x0fTrackerResponse\x12%\n\x0e\
    failure_reason\x18\x01\x20\x01(\tR\rfailureReason\x12\x1a\n\x08interval\
    \x18\x02\x20\x01(\rR\x08interval\x12&\n\x05peers\x18\x03\x20\x03(\x0b2\
    \x10.structs.pb.PeerR\x05peers\"\x92\x04\n\x0bPeerMessage\x127\n\x04type\
    \x18\x01\x20\x01(\x0e2#.structs.pb.PeerMessage.MessageTypeR\x04type\x12\
    \x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\x12\x1d\n\nhave_index\
    \x18\x04\x20\x01(\rR\thaveIndex\x129\n\x07request\x18\x05\x20\x01(\x0b2\
    \x1f.structs.pb.PeerMessage.RequestR\x07request\x123\n\x05piece\x18\x06\
    \x20\x01(\x0b2\x1d.structs.pb.PeerMessage.PieceR\x05piece\x1aM\n\x07Requ\
    est\x12\x14\n\x05index\x18\x01\x20\x01(\rR\x05index\x12\x14\n\x05begin\
    \x18\x02\x20\x01(\rR\x05begin\x12\x16\n\x06length\x18\x03\x20\x01(\rR\
    \x06length\x1aI\n\x05Piece\x12\x14\n\x05index\x18\x01\x20\x01(\rR\x05ind\
    ex\x12\x14\n\x05begin\x18\x02\x20\x01(\rR\x05begin\x12\x14\n\x05piece\
    \x18\x03\x20\x01(\x0cR\x05piece\"\x86\x01\n\x0bMessageType\x12\t\n\x05CH\
    OKE\x10\0\x12\x0c\n\x08UN_CHOKE\x10\x01\x12\x0e\n\nINTERESTED\x10\x02\
    \x12\x12\n\x0eNOT_INTERESTED\x10\x03\x12\x08\n\x04HAVE\x10\x04\x12\x0c\n\
    \x08BITFIELD\x10\x05\x12\x0b\n\x07REQUEST\x10\x06\x12\t\n\x05PIECE\x10\
    \x07\x12\n\n\x06CANCEL\x10\x08J\xbd*\n\x07\x12\x05\0\0\x97\x01\x02\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x13\n\n\n\x02\
    \x04\0\x12\x04\x03\0(\x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x10\nO\n\
    \x04\x04\0\x03\0\x12\x04\x06\x04\x0e\x05\x1aA\x20represents\x20a\x20sing\
    le\x20file\x20which\x20is\x20part\x20of\x20a\x20directory\x20structure\n\
    \n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x06\x0c\x14\n2\n\x06\x04\0\x03\0\
    \x02\0\x12\x03\t\x08\x1a\x1a#\x20The\x20length\x20of\x20the\x20file,\x20\
    in\x20bytes.\n\n\x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\x04\t\x08\x06\x16\n\
    \x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\t\x08\x0e\n\x0e\n\x07\x04\0\x03\
    \0\x02\0\x01\x12\x03\t\x0f\x15\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\
    \t\x18\x19\n\xa7\x01\n\x06\x04\0\x03\0\x02\x01\x12\x03\r\x08\"\x1a\x97\
    \x01\x20A\x20list\x20of\x20UTF-8\x20encoded\x20strings\x20corresponding\
    \x20to\x20subdirectory\x20names,\x20the\x20last\x20of\x20which\x20is\x20\
    the\x20actual\x20file\x20name.\n\x20a\x20zero\x20length\x20list\x20is\
    \x20an\x20error\x20case.\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03\r\
    \x08\x10\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\r\x11\x17\n\x0e\n\
    \x07\x04\0\x03\0\x02\x01\x01\x12\x03\r\x18\x1d\n\x0e\n\x07\x04\0\x03\0\
    \x02\x01\x03\x12\x03\r\x20!\n&\n\x04\x04\0\x02\0\x12\x03\x11\x04\x17\x1a\
    \x19\x20The\x20URL\x20of\x20the\x20tracker.\n\n\r\n\x05\x04\0\x02\0\x04\
    \x12\x04\x11\x04\x0e\x05\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x11\x04\n\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x0b\x12\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x11\x15\x16\n\xdc\x01\n\x04\x04\0\x02\x01\x12\x03\x16\x04\
    \x14\x1a\xce\x01\x20A\x20UTF-8\x20encoded\x20string\x20which\x20is\x20th\
    e\x20suggested\x20name\x20to\x20save\x20the\x20file\x20(or\x20directory)\
    \x20as\n\x20In\x20the\x20single\x20file\x20case,\x20the\x20name\x20key\
    \x20is\x20the\x20name\x20of\x20a\x20file,\n\x20in\x20the\x20muliple\x20f\
    ile\x20case,\x20it's\x20the\x20name\x20of\x20a\x20directory.\n\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x04\x16\x04\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x16\x0b\x0f\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x16\x12\x13\ni\n\x04\x04\0\x02\x02\
    \x12\x03\x1a\x04\x1c\x1a\\\x20The\x20number\x20of\x20bytes\x20in\x20each\
    \x20piece\x20the\x20file\x20is\x20split\x20into.\n\x20is\x20almost\x20al\
    ways\x20a\x20power\x20of\x20two\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\
    \x1a\x04\x16\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x1a\x04\n\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x1a\x0b\x17\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x1a\x1a\x1b\n\xbe\x01\n\x04\x04\0\x02\x03\x12\x03\x1f\x04\x16\
    \x1a\xb0\x01\x20maps\x20to\x20a\x20string\x20whose\x20length\x20is\x20a\
    \x20multiple\x20of\x2020.\n\x20It\x20is\x20to\x20be\x20subdivided\x20int\
    o\x20strings\x20of\x20length\x2020,\x20each\x20of\x20which\x20is\x20the\
    \x20SHA1\x20hash\x20of\x20the\x20piece\x20at\x20the\n\x20corresponding\
    \x20index.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x1f\x04\x1a\x1c\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\x1f\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1f\x14\x15\n\
    A\n\x04\x04\0\x02\x04\x12\x03#\x04\x16\x1a4\x20The\x20length\x20of\x20th\
    e\x20file\x20in\x20bytes.\n\x20only\x20single\x20file\n\n\r\n\x05\x04\0\
    \x02\x04\x04\x12\x04#\x04\x1f\x16\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03#\
    \x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03#\x0b\x11\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x03#\x14\x15\n\"\n\x04\x04\0\x02\x05\x12\x03&\x04\x20\
    \x1a\x15\x20only\x20multiple\x20files\n\n\x0c\n\x05\x04\0\x02\x05\x04\
    \x12\x03&\x04\x0c\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03&\r\x15\n\x0c\n\
    \x05\x04\0\x02\x05\x01\x12\x03&\x16\x1b\n\x0c\n\x05\x04\0\x02\x05\x03\
    \x12\x03&\x1e\x1f\n\n\n\x02\x04\x01\x12\x04*\05\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03*\x08\x0c\nD\n\x04\x04\x01\x02\0\x12\x03,\x04\x11\x1a7\x20ID\
    \x20of\x20a\x20given\x20peer\x20of\x20length\x2020\x20which\x20this\x20d\
    ownloader\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04,\x04*\x0e\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03,\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03,\
    \n\x0c\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03,\x0f\x10\n\xa3\x01\n\x04\
    \x04\x01\x02\x01\x12\x030\x04\x11\x1a\x95\x01\x20An\x20optional\x20param\
    eter\x20giving\x20the\x20IP\x20(or\x20dns\x20name)\x20which\x20this\x20p\
    eer\x20is\x20at.\n\x20Generally\x20used\x20for\x20the\x20origin\x20if\
    \x20it's\x20on\x20the\x20same\x20machine\x20as\x20the\x20tracker.\n\n\r\
    \n\x05\x04\x01\x02\x01\x04\x12\x040\x04,\x11\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x030\x04\t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x030\n\x0c\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x030\x0f\x10\n9\n\x04\x04\x01\x02\x02\x12\
    \x033\x04\x14\x1a,\x20The\x20port\x20number\x20this\x20peer\x20is\x20lis\
    tening\x20on.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x043\x040\x11\n\x0c\n\
    \x05\x04\x01\x02\x02\x05\x12\x033\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x033\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x033\x12\x13\n\n\n\
    \x02\x04\x02\x12\x047\0P\x01\n\n\n\x03\x04\x02\x01\x12\x037\x08\x16\n\
    \x0c\n\x04\x04\x02\x04\0\x12\x049\x04>\x05\n\x0c\n\x05\x04\x02\x04\0\x01\
    \x12\x039\t\x12\n\r\n\x06\x04\x02\x04\0\x02\0\x12\x03:\x08\x12\n\x0e\n\
    \x07\x04\x02\x04\0\x02\0\x01\x12\x03:\x08\r\n\x0e\n\x07\x04\x02\x04\0\
    \x02\0\x02\x12\x03:\x10\x11\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\x03;\x08\
    \x14\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\x03;\x08\x0f\n\x0e\n\x07\
    \x04\x02\x04\0\x02\x01\x02\x12\x03;\x12\x13\n\r\n\x06\x04\x02\x04\0\x02\
    \x02\x12\x03<\x08\x16\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\x12\x03<\x08\
    \x11\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x02\x12\x03<\x14\x15\n\r\n\x06\
    \x04\x02\x04\0\x02\x03\x12\x03=\x08\x14\n\x0e\n\x07\x04\x02\x04\0\x02\
    \x03\x01\x12\x03=\x08\x0f\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x02\x12\x03=\
    \x12\x13\nc\n\x04\x04\x02\x02\0\x12\x03A\x04\x17\x1aV\x20The\x2020\x20by\
    te\x20sha1\x20hash\x20of\x20the\x20bencoded\x20form\x20of\x20the\x20info\
    \x20value\x20from\x20the\x20metainfo\x20file.\n\n\r\n\x05\x04\x02\x02\0\
    \x04\x12\x04A\x04>\x05\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03A\x04\t\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03A\n\x12\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03A\x15\x16\n\x0b\n\x04\x04\x02\x02\x01\x12\x03C\x04\x12\n\r\n\
    \x05\x04\x02\x02\x01\x04\x12\x04C\x04A\x17\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03C\x04\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03C\t\r\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03C\x10\x11\n/\n\x04\x04\x02\x02\x02\x12\
    \x03F\x04\x17\x1a\"\x20The\x20total\x20amount\x20uploaded\x20so\x20far\n\
    \n\r\n\x05\x04\x02\x02\x02\x04\x12\x04F\x04C\x12\n\x0c\n\x05\x04\x02\x02\
    \x02\x05\x12\x03F\x04\t\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03F\n\x12\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03F\x15\x16\nM\n\x04\x04\x02\x02\x03\
    \x12\x03I\x04\x19\x1a@\x20The\x20total\x20amount\x20downloaded\x20so\x20\
    far,\x20encoded\x20in\x20base\x20ten\x20ascii.\n\n\r\n\x05\x04\x02\x02\
    \x03\x04\x12\x04I\x04F\x17\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03I\x04\
    \t\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03I\n\x14\n\x0c\n\x05\x04\x02\
    \x02\x03\x03\x12\x03I\x17\x18\nC\n\x04\x04\x02\x02\x04\x12\x03L\x04\x13\
    \x1a6\x20The\x20number\x20of\x20bytes\x20this\x20peer\x20still\x20has\
    \x20to\x20download.\n\n\r\n\x05\x04\x02\x02\x04\x04\x12\x04L\x04I\x19\n\
    \x0c\n\x05\x04\x02\x02\x04\x05\x12\x03L\x04\t\n\x0c\n\x05\x04\x02\x02\
    \x04\x01\x12\x03L\n\x0e\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03L\x11\x12\
    \n\x0b\n\x04\x04\x02\x02\x05\x12\x03N\x04\x18\n\r\n\x05\x04\x02\x02\x05\
    \x04\x12\x04N\x04L\x13\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\x03N\x04\r\n\
    \x0c\n\x05\x04\x02\x02\x05\x01\x12\x03N\x0e\x13\n\x0c\n\x05\x04\x02\x02\
    \x05\x03\x12\x03N\x16\x17\n\n\n\x02\x04\x03\x12\x04R\0]\x01\n\n\n\x03\
    \x04\x03\x01\x12\x03R\x08\x17\n$\n\x04\x04\x03\x02\0\x12\x03U\x04\x1e\
    \x1a\x17\x20when\x20the\x20query\x20failed\n\n\r\n\x05\x04\x03\x02\0\x04\
    \x12\x04U\x04R\x19\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03U\x04\n\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03U\x0b\x19\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03U\x1c\x1d\n[\n\x04\x04\x03\x02\x01\x12\x03X\x04\x18\x1aN\x20the\
    \x20number\x20of\x20seconds\x20the\x20downloader\x20should\x20wait\x20be\
    tween\x20regular\x20rerequests.\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04X\
    \x04U\x1e\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03X\x0b\x13\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03X\x16\x17\n\x1d\n\x04\x04\x03\x02\x02\x12\x03[\x04\x1c\x1a\x10\x20ma\
    tching\x20peers\n\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03[\x04\x0c\n\x0c\
    \n\x05\x04\x03\x02\x02\x06\x12\x03[\r\x11\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03[\x12\x17\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03[\x1a\x1b\n\
    -\n\x02\x04\x04\x12\x05`\0\x97\x01\x01\x1a\x20\x20messages\x20for\x20the\
    \x20peer\x20protocol\n\n\n\n\x03\x04\x04\x01\x12\x03`\x08\x13\n\x0c\n\
    \x04\x04\x04\x04\0\x12\x04a\x04k\x05\n\x0c\n\x05\x04\x04\x04\0\x01\x12\
    \x03a\t\x14\n\r\n\x06\x04\x04\x04\0\x02\0\x12\x03b\x08\x12\n\x0e\n\x07\
    \x04\x04\x04\0\x02\0\x01\x12\x03b\x08\r\n\x0e\n\x07\x04\x04\x04\0\x02\0\
    \x02\x12\x03b\x10\x11\n\r\n\x06\x04\x04\x04\0\x02\x01\x12\x03c\x08\x15\n\
    \x0e\n\x07\x04\x04\x04\0\x02\x01\x01\x12\x03c\x08\x10\n\x0e\n\x07\x04\
    \x04\x04\0\x02\x01\x02\x12\x03c\x13\x14\n\r\n\x06\x04\x04\x04\0\x02\x02\
    \x12\x03d\x08\x17\n\x0e\n\x07\x04\x04\x04\0\x02\x02\x01\x12\x03d\x08\x12\
    \n\x0e\n\x07\x04\x04\x04\0\x02\x02\x02\x12\x03d\x15\x16\n\r\n\x06\x04\
    \x04\x04\0\x02\x03\x12\x03e\x08\x1b\n\x0e\n\x07\x04\x04\x04\0\x02\x03\
    \x01\x12\x03e\x08\x16\n\x0e\n\x07\x04\x04\x04\0\x02\x03\x02\x12\x03e\x19\
    \x1a\n\r\n\x06\x04\x04\x04\0\x02\x04\x12\x03f\x08\x11\n\x0e\n\x07\x04\
    \x04\x04\0\x02\x04\x01\x12\x03f\x08\x0c\n\x0e\n\x07\x04\x04\x04\0\x02\
    \x04\x02\x12\x03f\x0f\x10\n\r\n\x06\x04\x04\x04\0\x02\x05\x12\x03g\x08\
    \x15\n\x0e\n\x07\x04\x04\x04\0\x02\x05\x01\x12\x03g\x08\x10\n\x0e\n\x07\
    \x04\x04\x04\0\x02\x05\x02\x12\x03g\x13\x14\n\r\n\x06\x04\x04\x04\0\x02\
    \x06\x12\x03h\x08\x14\n\x0e\n\x07\x04\x04\x04\0\x02\x06\x01\x12\x03h\x08\
    \x0f\n\x0e\n\x07\x04\x04\x04\0\x02\x06\x02\x12\x03h\x12\x13\n\r\n\x06\
    \x04\x04\x04\0\x02\x07\x12\x03i\x08\x12\n\x0e\n\x07\x04\x04\x04\0\x02\
    \x07\x01\x12\x03i\x08\r\n\x0e\n\x07\x04\x04\x04\0\x02\x07\x02\x12\x03i\
    \x10\x11\n\r\n\x06\x04\x04\x04\0\x02\x08\x12\x03j\x08\x13\n\x0e\n\x07\
    \x04\x04\x04\0\x02\x08\x01\x12\x03j\x08\x0e\n\x0e\n\x07\x04\x04\x04\0\
    \x02\x08\x02\x12\x03j\x11\x12\n\x0c\n\x04\x04\x04\x03\0\x12\x04m\x04w\
    \x05\n\x0c\n\x05\x04\x04\x03\0\x01\x12\x03m\x0c\x13\n\r\n\x06\x04\x04\
    \x03\0\x02\0\x12\x03o\x08\x19\n\x0f\n\x07\x04\x04\x03\0\x02\0\x04\x12\
    \x04o\x08m\x15\n\x0e\n\x07\x04\x04\x03\0\x02\0\x05\x12\x03o\x08\x0e\n\
    \x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\x03o\x0f\x14\n\x0e\n\x07\x04\x04\
    \x03\0\x02\0\x03\x12\x03o\x17\x18\n\x1c\n\x06\x04\x04\x03\0\x02\x01\x12\
    \x03r\x08\x19\x1a\r\x20byte\x20offset\n\n\x0f\n\x07\x04\x04\x03\0\x02\
    \x01\x04\x12\x04r\x08o\x19\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x05\x12\x03\
    r\x08\x0e\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x01\x12\x03r\x0f\x14\n\x0e\n\
    \x07\x04\x04\x03\0\x02\x01\x03\x12\x03r\x17\x18\n\xc7\x01\n\x06\x04\x04\
    \x03\0\x02\x02\x12\x03v\x08\x1a\x1a\xb7\x01\x20length\x20in\x20power\x20\
    of\x202,\x20unless\x20it\x20gets\x20truncated\x20by\x20the\x20end\x20of\
    \x20the\x20file\n\x20All\x20current\x20implementations\x20use\x202^14\
    \x20(16\x20kiB)\x20and\x20close\x20connections\x20which\x20request\x20an\
    \x20amount\x20greater\x20than\x20that.\n\n\x0f\n\x07\x04\x04\x03\0\x02\
    \x02\x04\x12\x04v\x08r\x19\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x05\x12\x03\
    v\x08\x0e\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x01\x12\x03v\x0f\x15\n\x0e\n\
    \x07\x04\x04\x03\0\x02\x02\x03\x12\x03v\x18\x19\n\r\n\x04\x04\x04\x03\
    \x01\x12\x05y\x04\x81\x01\x05\n\x0c\n\x05\x04\x04\x03\x01\x01\x12\x03y\
    \x0c\x11\n\r\n\x06\x04\x04\x03\x01\x02\0\x12\x03{\x08\x19\n\x0f\n\x07\
    \x04\x04\x03\x01\x02\0\x04\x12\x04{\x08y\x13\n\x0e\n\x07\x04\x04\x03\x01\
    \x02\0\x05\x12\x03{\x08\x0e\n\x0e\n\x07\x04\x04\x03\x01\x02\0\x01\x12\
    \x03{\x0f\x14\n\x0e\n\x07\x04\x04\x03\x01\x02\0\x03\x12\x03{\x17\x18\n\
    \x1c\n\x06\x04\x04\x03\x01\x02\x01\x12\x03~\x08\x19\x1a\r\x20byte\x20off\
    set\n\n\x0f\n\x07\x04\x04\x03\x01\x02\x01\x04\x12\x04~\x08{\x19\n\x0e\n\
    \x07\x04\x04\x03\x01\x02\x01\x05\x12\x03~\x08\x0e\n\x0e\n\x07\x04\x04\
    \x03\x01\x02\x01\x01\x12\x03~\x0f\x14\n\x0e\n\x07\x04\x04\x03\x01\x02\
    \x01\x03\x12\x03~\x17\x18\n\x0e\n\x06\x04\x04\x03\x01\x02\x02\x12\x04\
    \x80\x01\x08\x18\n\x10\n\x07\x04\x04\x03\x01\x02\x02\x04\x12\x05\x80\x01\
    \x08~\x19\n\x0f\n\x07\x04\x04\x03\x01\x02\x02\x05\x12\x04\x80\x01\x08\r\
    \n\x0f\n\x07\x04\x04\x03\x01\x02\x02\x01\x12\x04\x80\x01\x0e\x13\n\x0f\n\
    \x07\x04\x04\x03\x01\x02\x02\x03\x12\x04\x80\x01\x16\x17\n3\n\x04\x04\
    \x04\x02\0\x12\x04\x84\x01\x04\x19\x1a%\x20defines\x20what\x20type\x20of\
    \x20message\x20it\x20is.\n\n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\x84\x01\
    \x04\x81\x01\x05\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\x84\x01\x04\x0f\n\r\
    \n\x05\x04\x04\x02\0\x01\x12\x04\x84\x01\x10\x14\n\r\n\x05\x04\x04\x02\0\
    \x03\x12\x04\x84\x01\x17\x18\n\x89\x03\n\x04\x04\x04\x02\x01\x12\x04\x8c\
    \x01\x04\x16\x1a\xfa\x02\x20only\x20ever\x20sent\x20as\x20the\x20first\
    \x20message\n\x20a\x20bitfield\x20with\x20each\x20index\x20that\x20downl\
    oader\x20has\x20sent\x20set\x20to\x20one\x20and\x20the\x20rest\x20set\
    \x20to\x20zero.\n\x20Downloaders\x20which\x20don't\x20have\x20anything\
    \x20yet\x20may\x20skip\x20the\x20'bitfield'\x20message.\n\x20The\x20firs\
    t\x20byte\x20of\x20the\x20bitfield\x20corresponds\x20to\x20indices\x200\
    \x20-\x207\x20from\x20high\x20bit\x20to\x20low\x20bit,\x20respectively.\
    \n\x20The\x20next\x20one\x208-15,\x20etc.\x20Spare\x20bits\x20at\x20the\
    \x20end\x20are\x20set\x20to\x20zero.\n\x20BITFIELD\n\n\x0f\n\x05\x04\x04\
    \x02\x01\x04\x12\x06\x8c\x01\x04\x84\x01\x19\n\r\n\x05\x04\x04\x02\x01\
    \x05\x12\x04\x8c\x01\x04\t\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\x8c\x01\
    \n\x11\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\x8c\x01\x14\x15\n]\n\x04\
    \x04\x04\x02\x02\x12\x04\x90\x01\x04\x1a\x1aO\x20the\x20index\x20which\
    \x20that\x20downloader\x20just\x20completed\x20and\x20checked\x20the\x20\
    hash\x20of.\n\x20HAVE\n\n\x0f\n\x05\x04\x04\x02\x02\x04\x12\x06\x90\x01\
    \x04\x8c\x01\x16\n\r\n\x05\x04\x04\x02\x02\x05\x12\x04\x90\x01\x04\n\n\r\
    \n\x05\x04\x04\x02\x02\x01\x12\x04\x90\x01\x0b\x15\n\r\n\x05\x04\x04\x02\
    \x02\x03\x12\x04\x90\x01\x18\x19\n\x1f\n\x04\x04\x04\x02\x03\x12\x04\x93\
    \x01\x04\x18\x1a\x11\x20REQUEST,\x20CANCEL\n\n\x0f\n\x05\x04\x04\x02\x03\
    \x04\x12\x06\x93\x01\x04\x90\x01\x1a\n\r\n\x05\x04\x04\x02\x03\x06\x12\
    \x04\x93\x01\x04\x0b\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\x93\x01\x0c\
    \x13\n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\x93\x01\x16\x17\n\x15\n\x04\
    \x04\x04\x02\x04\x12\x04\x96\x01\x04\x14\x1a\x07\x20PIECE\n\n\x0f\n\x05\
    \x04\x04\x02\x04\x04\x12\x06\x96\x01\x04\x93\x01\x18\n\r\n\x05\x04\x04\
    \x02\x04\x06\x12\x04\x96\x01\x04\t\n\r\n\x05\x04\x04\x02\x04\x01\x12\x04\
    \x96\x01\n\x0f\n\r\n\x05\x04\x04\x02\x04\x03\x12\x04\x96\x01\x12\x13b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
